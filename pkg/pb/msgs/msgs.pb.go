//
//Copyright IBM Corp. All Rights Reserved.
//
//SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.18.1
// source: msgs/msgs.proto

package msgs

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// NetworkState contains the configuration agreed to by all nodes in the network
// as well as the current client statuses.  NetworkState must be reflected in the
// state digest for checkpoints.  The easiest way to accomplish this is by serializing
// the structure and including it in the application state.  Note, when there are a large
// number of clients, performing a custom serialization may be desirable.
type NetworkState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config                  *NetworkState_Config   `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	Clients                 []*NetworkState_Client `protobuf:"bytes,2,rep,name=clients,proto3" json:"clients,omitempty"`
	PendingReconfigurations []*Reconfiguration     `protobuf:"bytes,3,rep,name=pending_reconfigurations,json=pendingReconfigurations,proto3" json:"pending_reconfigurations,omitempty"`
	Reconfigured            bool                   `protobuf:"varint,4,opt,name=reconfigured,proto3" json:"reconfigured,omitempty"` // TODO, do we need this?
}

func (x *NetworkState) Reset() {
	*x = NetworkState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgs_msgs_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkState) ProtoMessage() {}

func (x *NetworkState) ProtoReflect() protoreflect.Message {
	mi := &file_msgs_msgs_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkState.ProtoReflect.Descriptor instead.
func (*NetworkState) Descriptor() ([]byte, []int) {
	return file_msgs_msgs_proto_rawDescGZIP(), []int{0}
}

func (x *NetworkState) GetConfig() *NetworkState_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *NetworkState) GetClients() []*NetworkState_Client {
	if x != nil {
		return x.Clients
	}
	return nil
}

func (x *NetworkState) GetPendingReconfigurations() []*Reconfiguration {
	if x != nil {
		return x.PendingReconfigurations
	}
	return nil
}

func (x *NetworkState) GetReconfigured() bool {
	if x != nil {
		return x.Reconfigured
	}
	return false
}

type Reconfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//	*Reconfiguration_NewClient_
	//	*Reconfiguration_RemoveClient
	//	*Reconfiguration_NewConfig
	Type isReconfiguration_Type `protobuf_oneof:"type"`
}

func (x *Reconfiguration) Reset() {
	*x = Reconfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgs_msgs_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Reconfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reconfiguration) ProtoMessage() {}

func (x *Reconfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_msgs_msgs_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reconfiguration.ProtoReflect.Descriptor instead.
func (*Reconfiguration) Descriptor() ([]byte, []int) {
	return file_msgs_msgs_proto_rawDescGZIP(), []int{1}
}

func (m *Reconfiguration) GetType() isReconfiguration_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *Reconfiguration) GetNewClient() *Reconfiguration_NewClient {
	if x, ok := x.GetType().(*Reconfiguration_NewClient_); ok {
		return x.NewClient
	}
	return nil
}

func (x *Reconfiguration) GetRemoveClient() uint64 {
	if x, ok := x.GetType().(*Reconfiguration_RemoveClient); ok {
		return x.RemoveClient
	}
	return 0
}

func (x *Reconfiguration) GetNewConfig() *NetworkState_Config {
	if x, ok := x.GetType().(*Reconfiguration_NewConfig); ok {
		return x.NewConfig
	}
	return nil
}

type isReconfiguration_Type interface {
	isReconfiguration_Type()
}

type Reconfiguration_NewClient_ struct {
	NewClient *Reconfiguration_NewClient `protobuf:"bytes,1,opt,name=new_client,json=newClient,proto3,oneof"`
}

type Reconfiguration_RemoveClient struct {
	RemoveClient uint64 `protobuf:"varint,2,opt,name=remove_client,json=removeClient,proto3,oneof"`
}

type Reconfiguration_NewConfig struct {
	NewConfig *NetworkState_Config `protobuf:"bytes,3,opt,name=new_config,json=newConfig,proto3,oneof"`
}

func (*Reconfiguration_NewClient_) isReconfiguration_Type() {}

func (*Reconfiguration_RemoveClient) isReconfiguration_Type() {}

func (*Reconfiguration_NewConfig) isReconfiguration_Type() {}

// Persistent contains data that should be persited by lib user
type Persistent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//	*Persistent_QEntry
	//	*Persistent_PEntry
	//	*Persistent_CEntry
	//	*Persistent_NEntry
	//	*Persistent_FEntry
	//	*Persistent_ECEntry
	//	*Persistent_TEntry
	//	*Persistent_Suspect
	Type isPersistent_Type `protobuf_oneof:"type"`
}

func (x *Persistent) Reset() {
	*x = Persistent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgs_msgs_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Persistent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Persistent) ProtoMessage() {}

func (x *Persistent) ProtoReflect() protoreflect.Message {
	mi := &file_msgs_msgs_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Persistent.ProtoReflect.Descriptor instead.
func (*Persistent) Descriptor() ([]byte, []int) {
	return file_msgs_msgs_proto_rawDescGZIP(), []int{2}
}

func (m *Persistent) GetType() isPersistent_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *Persistent) GetQEntry() *QEntry {
	if x, ok := x.GetType().(*Persistent_QEntry); ok {
		return x.QEntry
	}
	return nil
}

func (x *Persistent) GetPEntry() *PEntry {
	if x, ok := x.GetType().(*Persistent_PEntry); ok {
		return x.PEntry
	}
	return nil
}

func (x *Persistent) GetCEntry() *CEntry {
	if x, ok := x.GetType().(*Persistent_CEntry); ok {
		return x.CEntry
	}
	return nil
}

func (x *Persistent) GetNEntry() *NEntry {
	if x, ok := x.GetType().(*Persistent_NEntry); ok {
		return x.NEntry
	}
	return nil
}

func (x *Persistent) GetFEntry() *FEntry {
	if x, ok := x.GetType().(*Persistent_FEntry); ok {
		return x.FEntry
	}
	return nil
}

func (x *Persistent) GetECEntry() *ECEntry {
	if x, ok := x.GetType().(*Persistent_ECEntry); ok {
		return x.ECEntry
	}
	return nil
}

func (x *Persistent) GetTEntry() *TEntry {
	if x, ok := x.GetType().(*Persistent_TEntry); ok {
		return x.TEntry
	}
	return nil
}

func (x *Persistent) GetSuspect() *Suspect {
	if x, ok := x.GetType().(*Persistent_Suspect); ok {
		return x.Suspect
	}
	return nil
}

type isPersistent_Type interface {
	isPersistent_Type()
}

type Persistent_QEntry struct {
	QEntry *QEntry `protobuf:"bytes,1,opt,name=q_entry,json=qEntry,proto3,oneof"`
}

type Persistent_PEntry struct {
	PEntry *PEntry `protobuf:"bytes,2,opt,name=p_entry,json=pEntry,proto3,oneof"`
}

type Persistent_CEntry struct {
	CEntry *CEntry `protobuf:"bytes,3,opt,name=c_entry,json=cEntry,proto3,oneof"`
}

type Persistent_NEntry struct {
	NEntry *NEntry `protobuf:"bytes,4,opt,name=n_entry,json=nEntry,proto3,oneof"`
}

type Persistent_FEntry struct {
	FEntry *FEntry `protobuf:"bytes,5,opt,name=f_entry,json=fEntry,proto3,oneof"`
}

type Persistent_ECEntry struct {
	ECEntry *ECEntry `protobuf:"bytes,6,opt,name=e_c_entry,json=eCEntry,proto3,oneof"`
}

type Persistent_TEntry struct {
	TEntry *TEntry `protobuf:"bytes,7,opt,name=t_entry,json=tEntry,proto3,oneof"`
}

type Persistent_Suspect struct {
	Suspect *Suspect `protobuf:"bytes,8,opt,name=suspect,proto3,oneof"` // TODO, suspect_ready?
}

func (*Persistent_QEntry) isPersistent_Type() {}

func (*Persistent_PEntry) isPersistent_Type() {}

func (*Persistent_CEntry) isPersistent_Type() {}

func (*Persistent_NEntry) isPersistent_Type() {}

func (*Persistent_FEntry) isPersistent_Type() {}

func (*Persistent_ECEntry) isPersistent_Type() {}

func (*Persistent_TEntry) isPersistent_Type() {}

func (*Persistent_Suspect) isPersistent_Type() {}

// NEntry indicates that a new set of sequences are being allocated, and
// will be persisted immediately before log truncation occurs.
type NEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeqNo       uint64       `protobuf:"varint,1,opt,name=seq_no,json=seqNo,proto3" json:"seq_no,omitempty"`
	EpochConfig *EpochConfig `protobuf:"bytes,2,opt,name=epoch_config,json=epochConfig,proto3" json:"epoch_config,omitempty"` // TODO, include whether we've suspected
}

func (x *NEntry) Reset() {
	*x = NEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgs_msgs_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NEntry) ProtoMessage() {}

func (x *NEntry) ProtoReflect() protoreflect.Message {
	mi := &file_msgs_msgs_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NEntry.ProtoReflect.Descriptor instead.
func (*NEntry) Descriptor() ([]byte, []int) {
	return file_msgs_msgs_proto_rawDescGZIP(), []int{3}
}

func (x *NEntry) GetSeqNo() uint64 {
	if x != nil {
		return x.SeqNo
	}
	return 0
}

func (x *NEntry) GetEpochConfig() *EpochConfig {
	if x != nil {
		return x.EpochConfig
	}
	return nil
}

type FEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EndsEpochConfig *EpochConfig `protobuf:"bytes,1,opt,name=ends_epoch_config,json=endsEpochConfig,proto3" json:"ends_epoch_config,omitempty"`
}

func (x *FEntry) Reset() {
	*x = FEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgs_msgs_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FEntry) ProtoMessage() {}

func (x *FEntry) ProtoReflect() protoreflect.Message {
	mi := &file_msgs_msgs_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FEntry.ProtoReflect.Descriptor instead.
func (*FEntry) Descriptor() ([]byte, []int) {
	return file_msgs_msgs_proto_rawDescGZIP(), []int{4}
}

func (x *FEntry) GetEndsEpochConfig() *EpochConfig {
	if x != nil {
		return x.EndsEpochConfig
	}
	return nil
}

// ECEntry indicates that an epoch change has been sent, and that log truncation
// must halt until the next epoch begins.
type ECEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EpochNumber uint64 `protobuf:"varint,1,opt,name=epoch_number,json=epochNumber,proto3" json:"epoch_number,omitempty"`
}

func (x *ECEntry) Reset() {
	*x = ECEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgs_msgs_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ECEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ECEntry) ProtoMessage() {}

func (x *ECEntry) ProtoReflect() protoreflect.Message {
	mi := &file_msgs_msgs_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ECEntry.ProtoReflect.Descriptor instead.
func (*ECEntry) Descriptor() ([]byte, []int) {
	return file_msgs_msgs_proto_rawDescGZIP(), []int{5}
}

func (x *ECEntry) GetEpochNumber() uint64 {
	if x != nil {
		return x.EpochNumber
	}
	return 0
}

// TEntry indicates that a state transfer has been requested.
type TEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeqNo uint64 `protobuf:"varint,1,opt,name=seq_no,json=seqNo,proto3" json:"seq_no,omitempty"`
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *TEntry) Reset() {
	*x = TEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgs_msgs_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TEntry) ProtoMessage() {}

func (x *TEntry) ProtoReflect() protoreflect.Message {
	mi := &file_msgs_msgs_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TEntry.ProtoReflect.Descriptor instead.
func (*TEntry) Descriptor() ([]byte, []int) {
	return file_msgs_msgs_proto_rawDescGZIP(), []int{6}
}

func (x *TEntry) GetSeqNo() uint64 {
	if x != nil {
		return x.SeqNo
	}
	return 0
}

func (x *TEntry) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

// QEntry is an entry which must be persisted before a batch is Preprepared (ie,
// before a Preprepare or Prepare message is sent).  Note, any RequestAck referenced
// by the QEntry is already persisted to disk.
type QEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeqNo    uint64        `protobuf:"varint,2,opt,name=seq_no,json=seqNo,proto3" json:"seq_no,omitempty"`
	Digest   []byte        `protobuf:"bytes,3,opt,name=digest,proto3" json:"digest,omitempty"`
	Requests []*RequestAck `protobuf:"bytes,4,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (x *QEntry) Reset() {
	*x = QEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgs_msgs_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QEntry) ProtoMessage() {}

func (x *QEntry) ProtoReflect() protoreflect.Message {
	mi := &file_msgs_msgs_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QEntry.ProtoReflect.Descriptor instead.
func (*QEntry) Descriptor() ([]byte, []int) {
	return file_msgs_msgs_proto_rawDescGZIP(), []int{7}
}

func (x *QEntry) GetSeqNo() uint64 {
	if x != nil {
		return x.SeqNo
	}
	return 0
}

func (x *QEntry) GetDigest() []byte {
	if x != nil {
		return x.Digest
	}
	return nil
}

func (x *QEntry) GetRequests() []*RequestAck {
	if x != nil {
		return x.Requests
	}
	return nil
}

// PEntry is an entry which must be persisted before a batch is Prepared (ie,
// before a Commit message is sent).
type PEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeqNo  uint64 `protobuf:"varint,2,opt,name=seq_no,json=seqNo,proto3" json:"seq_no,omitempty"`
	Digest []byte `protobuf:"bytes,3,opt,name=digest,proto3" json:"digest,omitempty"`
}

func (x *PEntry) Reset() {
	*x = PEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgs_msgs_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PEntry) ProtoMessage() {}

func (x *PEntry) ProtoReflect() protoreflect.Message {
	mi := &file_msgs_msgs_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PEntry.ProtoReflect.Descriptor instead.
func (*PEntry) Descriptor() ([]byte, []int) {
	return file_msgs_msgs_proto_rawDescGZIP(), []int{8}
}

func (x *PEntry) GetSeqNo() uint64 {
	if x != nil {
		return x.SeqNo
	}
	return 0
}

func (x *PEntry) GetDigest() []byte {
	if x != nil {
		return x.Digest
	}
	return nil
}

// CEntry is an entry which must be persisted before a Checkpoint message is sent.
type CEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeqNo           uint64        `protobuf:"varint,1,opt,name=seq_no,json=seqNo,proto3" json:"seq_no,omitempty"`
	CheckpointValue []byte        `protobuf:"bytes,2,opt,name=checkpoint_value,json=checkpointValue,proto3" json:"checkpoint_value,omitempty"`
	NetworkState    *NetworkState `protobuf:"bytes,3,opt,name=network_state,json=networkState,proto3" json:"network_state,omitempty"`
}

func (x *CEntry) Reset() {
	*x = CEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgs_msgs_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CEntry) ProtoMessage() {}

func (x *CEntry) ProtoReflect() protoreflect.Message {
	mi := &file_msgs_msgs_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CEntry.ProtoReflect.Descriptor instead.
func (*CEntry) Descriptor() ([]byte, []int) {
	return file_msgs_msgs_proto_rawDescGZIP(), []int{9}
}

func (x *CEntry) GetSeqNo() uint64 {
	if x != nil {
		return x.SeqNo
	}
	return 0
}

func (x *CEntry) GetCheckpointValue() []byte {
	if x != nil {
		return x.CheckpointValue
	}
	return nil
}

func (x *CEntry) GetNetworkState() *NetworkState {
	if x != nil {
		return x.NetworkState
	}
	return nil
}

type Msg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//	*Msg_Preprepare
	//	*Msg_Prepare
	//	*Msg_Commit
	//	*Msg_Checkpoint
	//	*Msg_Suspect
	//	*Msg_EpochChange
	//	*Msg_EpochChangeAck
	//	*Msg_NewEpoch
	//	*Msg_NewEpochEcho
	//	*Msg_NewEpochReady
	//	*Msg_FetchBatch
	//	*Msg_ForwardBatch
	//	*Msg_FetchRequest
	//	*Msg_ForwardRequest
	//	*Msg_RequestAck
	Type isMsg_Type `protobuf_oneof:"type"`
}

func (x *Msg) Reset() {
	*x = Msg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgs_msgs_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Msg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Msg) ProtoMessage() {}

func (x *Msg) ProtoReflect() protoreflect.Message {
	mi := &file_msgs_msgs_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Msg.ProtoReflect.Descriptor instead.
func (*Msg) Descriptor() ([]byte, []int) {
	return file_msgs_msgs_proto_rawDescGZIP(), []int{10}
}

func (m *Msg) GetType() isMsg_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *Msg) GetPreprepare() *Preprepare {
	if x, ok := x.GetType().(*Msg_Preprepare); ok {
		return x.Preprepare
	}
	return nil
}

func (x *Msg) GetPrepare() *Prepare {
	if x, ok := x.GetType().(*Msg_Prepare); ok {
		return x.Prepare
	}
	return nil
}

func (x *Msg) GetCommit() *Commit {
	if x, ok := x.GetType().(*Msg_Commit); ok {
		return x.Commit
	}
	return nil
}

func (x *Msg) GetCheckpoint() *Checkpoint {
	if x, ok := x.GetType().(*Msg_Checkpoint); ok {
		return x.Checkpoint
	}
	return nil
}

func (x *Msg) GetSuspect() *Suspect {
	if x, ok := x.GetType().(*Msg_Suspect); ok {
		return x.Suspect
	}
	return nil
}

func (x *Msg) GetEpochChange() *EpochChange {
	if x, ok := x.GetType().(*Msg_EpochChange); ok {
		return x.EpochChange
	}
	return nil
}

func (x *Msg) GetEpochChangeAck() *EpochChangeAck {
	if x, ok := x.GetType().(*Msg_EpochChangeAck); ok {
		return x.EpochChangeAck
	}
	return nil
}

func (x *Msg) GetNewEpoch() *NewEpoch {
	if x, ok := x.GetType().(*Msg_NewEpoch); ok {
		return x.NewEpoch
	}
	return nil
}

func (x *Msg) GetNewEpochEcho() *NewEpochConfig {
	if x, ok := x.GetType().(*Msg_NewEpochEcho); ok {
		return x.NewEpochEcho
	}
	return nil
}

func (x *Msg) GetNewEpochReady() *NewEpochConfig {
	if x, ok := x.GetType().(*Msg_NewEpochReady); ok {
		return x.NewEpochReady
	}
	return nil
}

func (x *Msg) GetFetchBatch() *FetchBatch {
	if x, ok := x.GetType().(*Msg_FetchBatch); ok {
		return x.FetchBatch
	}
	return nil
}

func (x *Msg) GetForwardBatch() *ForwardBatch {
	if x, ok := x.GetType().(*Msg_ForwardBatch); ok {
		return x.ForwardBatch
	}
	return nil
}

func (x *Msg) GetFetchRequest() *RequestAck {
	if x, ok := x.GetType().(*Msg_FetchRequest); ok {
		return x.FetchRequest
	}
	return nil
}

func (x *Msg) GetForwardRequest() *ForwardRequest {
	if x, ok := x.GetType().(*Msg_ForwardRequest); ok {
		return x.ForwardRequest
	}
	return nil
}

func (x *Msg) GetRequestAck() *RequestAck {
	if x, ok := x.GetType().(*Msg_RequestAck); ok {
		return x.RequestAck
	}
	return nil
}

type isMsg_Type interface {
	isMsg_Type()
}

type Msg_Preprepare struct {
	Preprepare *Preprepare `protobuf:"bytes,1,opt,name=preprepare,proto3,oneof"`
}

type Msg_Prepare struct {
	Prepare *Prepare `protobuf:"bytes,2,opt,name=prepare,proto3,oneof"`
}

type Msg_Commit struct {
	Commit *Commit `protobuf:"bytes,3,opt,name=commit,proto3,oneof"`
}

type Msg_Checkpoint struct {
	Checkpoint *Checkpoint `protobuf:"bytes,4,opt,name=checkpoint,proto3,oneof"`
}

type Msg_Suspect struct {
	Suspect *Suspect `protobuf:"bytes,5,opt,name=suspect,proto3,oneof"`
}

type Msg_EpochChange struct {
	EpochChange *EpochChange `protobuf:"bytes,6,opt,name=epoch_change,json=epochChange,proto3,oneof"`
}

type Msg_EpochChangeAck struct {
	EpochChangeAck *EpochChangeAck `protobuf:"bytes,7,opt,name=epoch_change_ack,json=epochChangeAck,proto3,oneof"`
}

type Msg_NewEpoch struct {
	NewEpoch *NewEpoch `protobuf:"bytes,8,opt,name=new_epoch,json=newEpoch,proto3,oneof"`
}

type Msg_NewEpochEcho struct {
	NewEpochEcho *NewEpochConfig `protobuf:"bytes,9,opt,name=new_epoch_echo,json=newEpochEcho,proto3,oneof"`
}

type Msg_NewEpochReady struct {
	NewEpochReady *NewEpochConfig `protobuf:"bytes,10,opt,name=new_epoch_ready,json=newEpochReady,proto3,oneof"`
}

type Msg_FetchBatch struct {
	FetchBatch *FetchBatch `protobuf:"bytes,11,opt,name=fetch_batch,json=fetchBatch,proto3,oneof"`
}

type Msg_ForwardBatch struct {
	ForwardBatch *ForwardBatch `protobuf:"bytes,12,opt,name=forward_batch,json=forwardBatch,proto3,oneof"`
}

type Msg_FetchRequest struct {
	FetchRequest *RequestAck `protobuf:"bytes,13,opt,name=fetch_request,json=fetchRequest,proto3,oneof"`
}

type Msg_ForwardRequest struct {
	ForwardRequest *ForwardRequest `protobuf:"bytes,14,opt,name=forward_request,json=forwardRequest,proto3,oneof"`
}

type Msg_RequestAck struct {
	RequestAck *RequestAck `protobuf:"bytes,15,opt,name=request_ack,json=requestAck,proto3,oneof"`
}

func (*Msg_Preprepare) isMsg_Type() {}

func (*Msg_Prepare) isMsg_Type() {}

func (*Msg_Commit) isMsg_Type() {}

func (*Msg_Checkpoint) isMsg_Type() {}

func (*Msg_Suspect) isMsg_Type() {}

func (*Msg_EpochChange) isMsg_Type() {}

func (*Msg_EpochChangeAck) isMsg_Type() {}

func (*Msg_NewEpoch) isMsg_Type() {}

func (*Msg_NewEpochEcho) isMsg_Type() {}

func (*Msg_NewEpochReady) isMsg_Type() {}

func (*Msg_FetchBatch) isMsg_Type() {}

func (*Msg_ForwardBatch) isMsg_Type() {}

func (*Msg_FetchRequest) isMsg_Type() {}

func (*Msg_ForwardRequest) isMsg_Type() {}

func (*Msg_RequestAck) isMsg_Type() {}

type FetchBatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeqNo  uint64 `protobuf:"varint,1,opt,name=seq_no,json=seqNo,proto3" json:"seq_no,omitempty"`
	Digest []byte `protobuf:"bytes,2,opt,name=digest,proto3" json:"digest,omitempty"`
}

func (x *FetchBatch) Reset() {
	*x = FetchBatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgs_msgs_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchBatch) ProtoMessage() {}

func (x *FetchBatch) ProtoReflect() protoreflect.Message {
	mi := &file_msgs_msgs_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchBatch.ProtoReflect.Descriptor instead.
func (*FetchBatch) Descriptor() ([]byte, []int) {
	return file_msgs_msgs_proto_rawDescGZIP(), []int{11}
}

func (x *FetchBatch) GetSeqNo() uint64 {
	if x != nil {
		return x.SeqNo
	}
	return 0
}

func (x *FetchBatch) GetDigest() []byte {
	if x != nil {
		return x.Digest
	}
	return nil
}

type ForwardBatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeqNo       uint64        `protobuf:"varint,1,opt,name=seq_no,json=seqNo,proto3" json:"seq_no,omitempty"`
	RequestAcks []*RequestAck `protobuf:"bytes,2,rep,name=request_acks,json=requestAcks,proto3" json:"request_acks,omitempty"`
	Digest      []byte        `protobuf:"bytes,3,opt,name=digest,proto3" json:"digest,omitempty"`
}

func (x *ForwardBatch) Reset() {
	*x = ForwardBatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgs_msgs_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForwardBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForwardBatch) ProtoMessage() {}

func (x *ForwardBatch) ProtoReflect() protoreflect.Message {
	mi := &file_msgs_msgs_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForwardBatch.ProtoReflect.Descriptor instead.
func (*ForwardBatch) Descriptor() ([]byte, []int) {
	return file_msgs_msgs_proto_rawDescGZIP(), []int{12}
}

func (x *ForwardBatch) GetSeqNo() uint64 {
	if x != nil {
		return x.SeqNo
	}
	return 0
}

func (x *ForwardBatch) GetRequestAcks() []*RequestAck {
	if x != nil {
		return x.RequestAcks
	}
	return nil
}

func (x *ForwardBatch) GetDigest() []byte {
	if x != nil {
		return x.Digest
	}
	return nil
}

type ForwardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestAck  *RequestAck `protobuf:"bytes,1,opt,name=request_ack,json=requestAck,proto3" json:"request_ack,omitempty"`
	RequestData []byte      `protobuf:"bytes,2,opt,name=request_data,json=requestData,proto3" json:"request_data,omitempty"`
}

func (x *ForwardRequest) Reset() {
	*x = ForwardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgs_msgs_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForwardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForwardRequest) ProtoMessage() {}

func (x *ForwardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_msgs_msgs_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForwardRequest.ProtoReflect.Descriptor instead.
func (*ForwardRequest) Descriptor() ([]byte, []int) {
	return file_msgs_msgs_proto_rawDescGZIP(), []int{13}
}

func (x *ForwardRequest) GetRequestAck() *RequestAck {
	if x != nil {
		return x.RequestAck
	}
	return nil
}

func (x *ForwardRequest) GetRequestData() []byte {
	if x != nil {
		return x.RequestData
	}
	return nil
}

type Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId uint64 `protobuf:"varint,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	ReqNo    uint64 `protobuf:"varint,2,opt,name=req_no,json=reqNo,proto3" json:"req_no,omitempty"`
	Data     []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *Request) Reset() {
	*x = Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgs_msgs_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request) ProtoMessage() {}

func (x *Request) ProtoReflect() protoreflect.Message {
	mi := &file_msgs_msgs_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request.ProtoReflect.Descriptor instead.
func (*Request) Descriptor() ([]byte, []int) {
	return file_msgs_msgs_proto_rawDescGZIP(), []int{14}
}

func (x *Request) GetClientId() uint64 {
	if x != nil {
		return x.ClientId
	}
	return 0
}

func (x *Request) GetReqNo() uint64 {
	if x != nil {
		return x.ReqNo
	}
	return 0
}

func (x *Request) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type RequestAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId uint64 `protobuf:"varint,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	ReqNo    uint64 `protobuf:"varint,2,opt,name=req_no,json=reqNo,proto3" json:"req_no,omitempty"`
	Digest   []byte `protobuf:"bytes,3,opt,name=digest,proto3" json:"digest,omitempty"`
}

func (x *RequestAck) Reset() {
	*x = RequestAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgs_msgs_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestAck) ProtoMessage() {}

func (x *RequestAck) ProtoReflect() protoreflect.Message {
	mi := &file_msgs_msgs_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestAck.ProtoReflect.Descriptor instead.
func (*RequestAck) Descriptor() ([]byte, []int) {
	return file_msgs_msgs_proto_rawDescGZIP(), []int{15}
}

func (x *RequestAck) GetClientId() uint64 {
	if x != nil {
		return x.ClientId
	}
	return 0
}

func (x *RequestAck) GetReqNo() uint64 {
	if x != nil {
		return x.ReqNo
	}
	return 0
}

func (x *RequestAck) GetDigest() []byte {
	if x != nil {
		return x.Digest
	}
	return nil
}

type Preprepare struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeqNo uint64        `protobuf:"varint,1,opt,name=seq_no,json=seqNo,proto3" json:"seq_no,omitempty"`
	Epoch uint64        `protobuf:"varint,2,opt,name=epoch,proto3" json:"epoch,omitempty"`
	Batch []*RequestAck `protobuf:"bytes,3,rep,name=batch,proto3" json:"batch,omitempty"`
}

func (x *Preprepare) Reset() {
	*x = Preprepare{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgs_msgs_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Preprepare) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Preprepare) ProtoMessage() {}

func (x *Preprepare) ProtoReflect() protoreflect.Message {
	mi := &file_msgs_msgs_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Preprepare.ProtoReflect.Descriptor instead.
func (*Preprepare) Descriptor() ([]byte, []int) {
	return file_msgs_msgs_proto_rawDescGZIP(), []int{16}
}

func (x *Preprepare) GetSeqNo() uint64 {
	if x != nil {
		return x.SeqNo
	}
	return 0
}

func (x *Preprepare) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *Preprepare) GetBatch() []*RequestAck {
	if x != nil {
		return x.Batch
	}
	return nil
}

type Prepare struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeqNo  uint64 `protobuf:"varint,1,opt,name=seq_no,json=seqNo,proto3" json:"seq_no,omitempty"`
	Epoch  uint64 `protobuf:"varint,2,opt,name=epoch,proto3" json:"epoch,omitempty"`
	Digest []byte `protobuf:"bytes,3,opt,name=digest,proto3" json:"digest,omitempty"`
}

func (x *Prepare) Reset() {
	*x = Prepare{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgs_msgs_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Prepare) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Prepare) ProtoMessage() {}

func (x *Prepare) ProtoReflect() protoreflect.Message {
	mi := &file_msgs_msgs_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Prepare.ProtoReflect.Descriptor instead.
func (*Prepare) Descriptor() ([]byte, []int) {
	return file_msgs_msgs_proto_rawDescGZIP(), []int{17}
}

func (x *Prepare) GetSeqNo() uint64 {
	if x != nil {
		return x.SeqNo
	}
	return 0
}

func (x *Prepare) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *Prepare) GetDigest() []byte {
	if x != nil {
		return x.Digest
	}
	return nil
}

type Commit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeqNo  uint64 `protobuf:"varint,1,opt,name=seq_no,json=seqNo,proto3" json:"seq_no,omitempty"`
	Epoch  uint64 `protobuf:"varint,2,opt,name=epoch,proto3" json:"epoch,omitempty"`
	Digest []byte `protobuf:"bytes,3,opt,name=digest,proto3" json:"digest,omitempty"`
}

func (x *Commit) Reset() {
	*x = Commit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgs_msgs_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Commit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Commit) ProtoMessage() {}

func (x *Commit) ProtoReflect() protoreflect.Message {
	mi := &file_msgs_msgs_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Commit.ProtoReflect.Descriptor instead.
func (*Commit) Descriptor() ([]byte, []int) {
	return file_msgs_msgs_proto_rawDescGZIP(), []int{18}
}

func (x *Commit) GetSeqNo() uint64 {
	if x != nil {
		return x.SeqNo
	}
	return 0
}

func (x *Commit) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *Commit) GetDigest() []byte {
	if x != nil {
		return x.Digest
	}
	return nil
}

type Checkpoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeqNo uint64 `protobuf:"varint,1,opt,name=seq_no,json=seqNo,proto3" json:"seq_no,omitempty"`
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Checkpoint) Reset() {
	*x = Checkpoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgs_msgs_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Checkpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Checkpoint) ProtoMessage() {}

func (x *Checkpoint) ProtoReflect() protoreflect.Message {
	mi := &file_msgs_msgs_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Checkpoint.ProtoReflect.Descriptor instead.
func (*Checkpoint) Descriptor() ([]byte, []int) {
	return file_msgs_msgs_proto_rawDescGZIP(), []int{19}
}

func (x *Checkpoint) GetSeqNo() uint64 {
	if x != nil {
		return x.SeqNo
	}
	return 0
}

func (x *Checkpoint) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type Suspect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Epoch uint64 `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
}

func (x *Suspect) Reset() {
	*x = Suspect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgs_msgs_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Suspect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Suspect) ProtoMessage() {}

func (x *Suspect) ProtoReflect() protoreflect.Message {
	mi := &file_msgs_msgs_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Suspect.ProtoReflect.Descriptor instead.
func (*Suspect) Descriptor() ([]byte, []int) {
	return file_msgs_msgs_proto_rawDescGZIP(), []int{20}
}

func (x *Suspect) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

// EpochChange messages are used to implement the classical PBFT view-change
// protocol, (very) slightly modified to adapt to Mir.  The assorted sets
// are encoded as repeated fields, rather than as maps for ease of serialization
// and particularly for computing a digest to attest to.  If any set contains
// a duplicated entry, the message may be discarded as byzantine.
type EpochChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewEpoch uint64 `protobuf:"varint,1,opt,name=new_epoch,json=newEpoch,proto3" json:"new_epoch,omitempty"`
	// c_set contains the entries for the C-set as defined by the classical
	// PBFT view-change protocol.
	Checkpoints []*Checkpoint `protobuf:"bytes,2,rep,name=checkpoints,proto3" json:"checkpoints,omitempty"`
	// p_set contains the entries for the P-set as defined by the classical
	// PBFT view-change protocol.
	PSet []*EpochChange_SetEntry `protobuf:"bytes,3,rep,name=p_set,json=pSet,proto3" json:"p_set,omitempty"`
	// q_set contains the entries for the Q-set as defined by the classical
	// PBFT view-change protocol.
	QSet []*EpochChange_SetEntry `protobuf:"bytes,4,rep,name=q_set,json=qSet,proto3" json:"q_set,omitempty"`
}

func (x *EpochChange) Reset() {
	*x = EpochChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgs_msgs_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EpochChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EpochChange) ProtoMessage() {}

func (x *EpochChange) ProtoReflect() protoreflect.Message {
	mi := &file_msgs_msgs_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EpochChange.ProtoReflect.Descriptor instead.
func (*EpochChange) Descriptor() ([]byte, []int) {
	return file_msgs_msgs_proto_rawDescGZIP(), []int{21}
}

func (x *EpochChange) GetNewEpoch() uint64 {
	if x != nil {
		return x.NewEpoch
	}
	return 0
}

func (x *EpochChange) GetCheckpoints() []*Checkpoint {
	if x != nil {
		return x.Checkpoints
	}
	return nil
}

func (x *EpochChange) GetPSet() []*EpochChange_SetEntry {
	if x != nil {
		return x.PSet
	}
	return nil
}

func (x *EpochChange) GetQSet() []*EpochChange_SetEntry {
	if x != nil {
		return x.QSet
	}
	return nil
}

// EpochChangeAck messages are broadcast in response to receiving a valid epoch change
// from a replica.  Replicas collect these epoch change ack messages, and when there are 2f+1
// such messages begin to count that epoch change as appropriately broadcast for purposes of
// the epoch change timer.
type EpochChangeAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Originator uint64 `protobuf:"varint,1,opt,name=originator,proto3" json:"originator,omitempty"`
	// epoch_change is included fully instead of echo-ing the digest as suggested by the original
	// PBFT paper.  This is purely to prevent requiring a separate fetch step for missing epoch change
	// requests.  Although this is slightly heavier, because ungraceful epoch change is not a performance
	// optimal path, the simplification seems worthwhile.
	EpochChange *EpochChange `protobuf:"bytes,2,opt,name=epoch_change,json=epochChange,proto3" json:"epoch_change,omitempty"`
}

func (x *EpochChangeAck) Reset() {
	*x = EpochChangeAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgs_msgs_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EpochChangeAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EpochChangeAck) ProtoMessage() {}

func (x *EpochChangeAck) ProtoReflect() protoreflect.Message {
	mi := &file_msgs_msgs_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EpochChangeAck.ProtoReflect.Descriptor instead.
func (*EpochChangeAck) Descriptor() ([]byte, []int) {
	return file_msgs_msgs_proto_rawDescGZIP(), []int{22}
}

func (x *EpochChangeAck) GetOriginator() uint64 {
	if x != nil {
		return x.Originator
	}
	return 0
}

func (x *EpochChangeAck) GetEpochChange() *EpochChange {
	if x != nil {
		return x.EpochChange
	}
	return nil
}

type EpochConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// number of this new epoch
	Number            uint64   `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	Leaders           []uint64 `protobuf:"varint,2,rep,packed,name=leaders,proto3" json:"leaders,omitempty"`
	PlannedExpiration uint64   `protobuf:"varint,3,opt,name=planned_expiration,json=plannedExpiration,proto3" json:"planned_expiration,omitempty"`
}

func (x *EpochConfig) Reset() {
	*x = EpochConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgs_msgs_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EpochConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EpochConfig) ProtoMessage() {}

func (x *EpochConfig) ProtoReflect() protoreflect.Message {
	mi := &file_msgs_msgs_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EpochConfig.ProtoReflect.Descriptor instead.
func (*EpochConfig) Descriptor() ([]byte, []int) {
	return file_msgs_msgs_proto_rawDescGZIP(), []int{23}
}

func (x *EpochConfig) GetNumber() uint64 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *EpochConfig) GetLeaders() []uint64 {
	if x != nil {
		return x.Leaders
	}
	return nil
}

func (x *EpochConfig) GetPlannedExpiration() uint64 {
	if x != nil {
		return x.PlannedExpiration
	}
	return 0
}

type NewEpochConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config             *EpochConfig `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	StartingCheckpoint *Checkpoint  `protobuf:"bytes,2,opt,name=starting_checkpoint,json=startingCheckpoint,proto3" json:"starting_checkpoint,omitempty"`
	// final_preprepares finalizes the last checkpoint window or windows
	// which some correct replica preprepared a sequence in. The entries are
	// digests indexed by sequence number offset by the starting_checkpoint
	// seq_no. An empty digest corresponds to a null request.
	FinalPreprepares [][]byte `protobuf:"bytes,3,rep,name=final_preprepares,json=finalPreprepares,proto3" json:"final_preprepares,omitempty"`
}

func (x *NewEpochConfig) Reset() {
	*x = NewEpochConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgs_msgs_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewEpochConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewEpochConfig) ProtoMessage() {}

func (x *NewEpochConfig) ProtoReflect() protoreflect.Message {
	mi := &file_msgs_msgs_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewEpochConfig.ProtoReflect.Descriptor instead.
func (*NewEpochConfig) Descriptor() ([]byte, []int) {
	return file_msgs_msgs_proto_rawDescGZIP(), []int{24}
}

func (x *NewEpochConfig) GetConfig() *EpochConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *NewEpochConfig) GetStartingCheckpoint() *Checkpoint {
	if x != nil {
		return x.StartingCheckpoint
	}
	return nil
}

func (x *NewEpochConfig) GetFinalPreprepares() [][]byte {
	if x != nil {
		return x.FinalPreprepares
	}
	return nil
}

// NewEpoch is akin to the NewView message in classical PBFT and follows the same
// semantics.  Optionally, for graceful epoch change, the epoch_changes field may
// be empty.  In the event that the previous epoch does not complete gracefully,
// the graceful NewEpoch is ignored.  Unlike in classical PBFT, we employ a classical
// Bracha reliable broadcast on embedded config.  A replica should respond to a NewEpoch
// message with a NewEpochEcho (assuming that the NewEpoch message is validly constructed).
// We consider the payload of the broadcast to be the config, and treat the epoch changes
// as the signature / proof which validates the initial connection but does not need
// to be rebroadcast.
type NewEpoch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewConfig *NewEpochConfig `protobuf:"bytes,1,opt,name=new_config,json=newConfig,proto3" json:"new_config,omitempty"`
	// epoch_changes must contains at least 2f+1 EpochChange messages references from
	// replicas in the network.  If two EpochChanges references originated from the same
	// replica, then the NewEpoch message is invalid.
	EpochChanges []*NewEpoch_RemoteEpochChange `protobuf:"bytes,2,rep,name=epoch_changes,json=epochChanges,proto3" json:"epoch_changes,omitempty"`
}

func (x *NewEpoch) Reset() {
	*x = NewEpoch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgs_msgs_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewEpoch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewEpoch) ProtoMessage() {}

func (x *NewEpoch) ProtoReflect() protoreflect.Message {
	mi := &file_msgs_msgs_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewEpoch.ProtoReflect.Descriptor instead.
func (*NewEpoch) Descriptor() ([]byte, []int) {
	return file_msgs_msgs_proto_rawDescGZIP(), []int{25}
}

func (x *NewEpoch) GetNewConfig() *NewEpochConfig {
	if x != nil {
		return x.NewConfig
	}
	return nil
}

func (x *NewEpoch) GetEpochChanges() []*NewEpoch_RemoteEpochChange {
	if x != nil {
		return x.EpochChanges
	}
	return nil
}

type NetworkState_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Nodes represent the active nodeIDs in the network.
	// The number of nodeIDs corresponds to the size of the network.
	Nodes []uint64 `protobuf:"varint,1,rep,packed,name=nodes,proto3" json:"nodes,omitempty"`
	// CheckpointInterval is how often checkpoints are taken.  In terms of
	// of sequence numbers, this is multiplied by the configured number of
	// buckets, so that it scales naturally as the number of buckets increases
	// or decreases.
	CheckpointInterval int32 `protobuf:"varint,2,opt,name=checkpoint_interval,json=checkpointInterval,proto3" json:"checkpoint_interval,omitempty"`
	// MaxEpochLength is the maximum number of sequence numbers which may preprepare
	// in an epoch.  This is to force bucket rotation even when the system is otherwise
	// in a healthy state.  Setting this value to uint64_max will effectively disable
	// graceful epoch changes.
	MaxEpochLength uint64 `protobuf:"varint,3,opt,name=max_epoch_length,json=maxEpochLength,proto3" json:"max_epoch_length,omitempty"`
	// NumberOfBuckets is the number of buckets the network is configured to operate over.
	// Each bucket is a partition of the request space.  Typically, number of buckets should
	// be nodes * m, where 'm' is some small constant.  Setting this value to 1 effectively
	// reduces Mir to PBFT.
	NumberOfBuckets int32 `protobuf:"varint,4,opt,name=number_of_buckets,json=numberOfBuckets,proto3" json:"number_of_buckets,omitempty"`
	// F is the number of byzantine faults tolerated by the network.
	// It must be less than len(nodes)/3 (truncated).  The 'F' parameter
	// need not be maximal, ie, a network of 9 nodes with 'F' set to 1 may
	// simultaneously tolerate 1 byzantine fault, and 2 crash faults.  Whereas
	// when F=2, that 9 node network may only tolerate 2 crash faults.  Note
	// usually, a maximal value makes sense.  For instance in a network of 7
	// nodes F=1, and F=2 both provide crash tolerance of only 2 nodes.  The
	// following table summarizes the number of crash faults tolerated for
	// a given network of size N and number of byzantine faults tolerated F.
	//
	//    |           F           |
	//    | 0 | 1 | 2 | 3 | 4 | 5 |
	// N --------------------------
	// 1  | 0 |   |   |   |   |   |
	// 2  | 0 |   |   |   |   |   |
	// 3  | 1 |   |   |   |   |   |
	// 4  | 1 | 1 |   |   |   |   |
	// 5  | 2 | 1 |   |   |   |   |
	// 6  | 2 | 1 |   |   |   |   |
	// 7  | 3 | 2 | 2 |   |   |   |
	// 8  | 3 | 3 | 2 |   |   |   |
	// 9  | 4 | 3 | 2 |   |   |   |
	// 10 | 4 | 4 | 3 | 3 |   |   |
	// 11 | 5 | 4 | 4 | 3 |   |   |
	// 12 | 5 | 5 | 4 | 4 |   |   |
	// 13 | 6 | 5 | 5 | 4 | 4 |   |
	// 14 | 6 | 6 | 5 | 5 | 4 |   |
	// 15 | 7 | 6 | 6 | 5 | 5 |   |
	// 16 | 7 | 7 | 6 | 6 | 5 | 5 |
	// 17 | 8 | 7 | 7 | 6 | 6 | 5 |
	F int32 `protobuf:"varint,5,opt,name=f,proto3" json:"f,omitempty"`
}

func (x *NetworkState_Config) Reset() {
	*x = NetworkState_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgs_msgs_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkState_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkState_Config) ProtoMessage() {}

func (x *NetworkState_Config) ProtoReflect() protoreflect.Message {
	mi := &file_msgs_msgs_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkState_Config.ProtoReflect.Descriptor instead.
func (*NetworkState_Config) Descriptor() ([]byte, []int) {
	return file_msgs_msgs_proto_rawDescGZIP(), []int{0, 0}
}

func (x *NetworkState_Config) GetNodes() []uint64 {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *NetworkState_Config) GetCheckpointInterval() int32 {
	if x != nil {
		return x.CheckpointInterval
	}
	return 0
}

func (x *NetworkState_Config) GetMaxEpochLength() uint64 {
	if x != nil {
		return x.MaxEpochLength
	}
	return 0
}

func (x *NetworkState_Config) GetNumberOfBuckets() int32 {
	if x != nil {
		return x.NumberOfBuckets
	}
	return 0
}

func (x *NetworkState_Config) GetF() int32 {
	if x != nil {
		return x.F
	}
	return 0
}

type NetworkState_Client struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A unique ID for this client, never repeated.
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Width is the configured width of the request window for this client.
	// Clients must submit requests sequentially, but, replicas will participate
	// in the ack procedures for any request acknowledged within this window.
	Width uint32 `protobuf:"varint,2,opt,name=width,proto3" json:"width,omitempty"`
	// WidthConsumedLastCheckpoint is the portion of the request window which
	// overlaps with commits in the last checkpoint.  It must be tracked because
	// we do not want to wait for the previous checkpoint to be computed before
	// processing requests in the next checkpoint window.  Therefore, we restrict
	// the width in the current checkpoint window to be width - width_consumed_last_checkpoint
	// and in this way, we ensure that all replicas regardless of whether they have the
	// last checkpoint can deterministically evaluate whether a request is within the
	// expected watermarks.
	WidthConsumedLastCheckpoint uint32 `protobuf:"varint,3,opt,name=width_consumed_last_checkpoint,json=widthConsumedLastCheckpoint,proto3" json:"width_consumed_last_checkpoint,omitempty"`
	// LowWatermark is the lowest uncommitted request number.
	LowWatermark uint64 `protobuf:"varint,4,opt,name=low_watermark,json=lowWatermark,proto3" json:"low_watermark,omitempty"`
	// CommittedMask is a bitmask of up to length 'width', indicating which request numbers
	// beyond the low_watermark have committed.  If non-empty, the last byte is never 0,
	// and all request numbers beyond the last bit are uncommitted.  Note, a repeated bool
	// would be much more natural, but very space inefficient per proto's implementation.
	CommittedMask []byte `protobuf:"bytes,5,opt,name=committed_mask,json=committedMask,proto3" json:"committed_mask,omitempty"`
}

func (x *NetworkState_Client) Reset() {
	*x = NetworkState_Client{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgs_msgs_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkState_Client) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkState_Client) ProtoMessage() {}

func (x *NetworkState_Client) ProtoReflect() protoreflect.Message {
	mi := &file_msgs_msgs_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkState_Client.ProtoReflect.Descriptor instead.
func (*NetworkState_Client) Descriptor() ([]byte, []int) {
	return file_msgs_msgs_proto_rawDescGZIP(), []int{0, 1}
}

func (x *NetworkState_Client) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *NetworkState_Client) GetWidth() uint32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *NetworkState_Client) GetWidthConsumedLastCheckpoint() uint32 {
	if x != nil {
		return x.WidthConsumedLastCheckpoint
	}
	return 0
}

func (x *NetworkState_Client) GetLowWatermark() uint64 {
	if x != nil {
		return x.LowWatermark
	}
	return 0
}

func (x *NetworkState_Client) GetCommittedMask() []byte {
	if x != nil {
		return x.CommittedMask
	}
	return nil
}

type Reconfiguration_NewClient struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Width uint32 `protobuf:"varint,2,opt,name=width,proto3" json:"width,omitempty"`
}

func (x *Reconfiguration_NewClient) Reset() {
	*x = Reconfiguration_NewClient{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgs_msgs_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Reconfiguration_NewClient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reconfiguration_NewClient) ProtoMessage() {}

func (x *Reconfiguration_NewClient) ProtoReflect() protoreflect.Message {
	mi := &file_msgs_msgs_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reconfiguration_NewClient.ProtoReflect.Descriptor instead.
func (*Reconfiguration_NewClient) Descriptor() ([]byte, []int) {
	return file_msgs_msgs_proto_rawDescGZIP(), []int{1, 0}
}

func (x *Reconfiguration_NewClient) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Reconfiguration_NewClient) GetWidth() uint32 {
	if x != nil {
		return x.Width
	}
	return 0
}

type EpochChange_SetEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Epoch  uint64 `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	SeqNo  uint64 `protobuf:"varint,2,opt,name=seq_no,json=seqNo,proto3" json:"seq_no,omitempty"`
	Digest []byte `protobuf:"bytes,3,opt,name=digest,proto3" json:"digest,omitempty"`
}

func (x *EpochChange_SetEntry) Reset() {
	*x = EpochChange_SetEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgs_msgs_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EpochChange_SetEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EpochChange_SetEntry) ProtoMessage() {}

func (x *EpochChange_SetEntry) ProtoReflect() protoreflect.Message {
	mi := &file_msgs_msgs_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EpochChange_SetEntry.ProtoReflect.Descriptor instead.
func (*EpochChange_SetEntry) Descriptor() ([]byte, []int) {
	return file_msgs_msgs_proto_rawDescGZIP(), []int{21, 0}
}

func (x *EpochChange_SetEntry) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *EpochChange_SetEntry) GetSeqNo() uint64 {
	if x != nil {
		return x.SeqNo
	}
	return 0
}

func (x *EpochChange_SetEntry) GetDigest() []byte {
	if x != nil {
		return x.Digest
	}
	return nil
}

type NewEpoch_RemoteEpochChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId uint64 `protobuf:"varint,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	Digest []byte `protobuf:"bytes,2,opt,name=digest,proto3" json:"digest,omitempty"`
}

func (x *NewEpoch_RemoteEpochChange) Reset() {
	*x = NewEpoch_RemoteEpochChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgs_msgs_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewEpoch_RemoteEpochChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewEpoch_RemoteEpochChange) ProtoMessage() {}

func (x *NewEpoch_RemoteEpochChange) ProtoReflect() protoreflect.Message {
	mi := &file_msgs_msgs_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewEpoch_RemoteEpochChange.ProtoReflect.Descriptor instead.
func (*NewEpoch_RemoteEpochChange) Descriptor() ([]byte, []int) {
	return file_msgs_msgs_proto_rawDescGZIP(), []int{25, 0}
}

func (x *NewEpoch_RemoteEpochChange) GetNodeId() uint64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *NewEpoch_RemoteEpochChange) GetDigest() []byte {
	if x != nil {
		return x.Digest
	}
	return nil
}

var File_msgs_msgs_proto protoreflect.FileDescriptor

var file_msgs_msgs_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x6d, 0x73, 0x67, 0x73, 0x2f, 0x6d, 0x73, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x04, 0x6d, 0x73, 0x67, 0x73, 0x22, 0xe4, 0x04, 0x0a, 0x0c, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x73, 0x67, 0x73, 0x2e,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x33, 0x0a, 0x07, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d,
	0x73, 0x67, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x50, 0x0a, 0x18, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x73, 0x67, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x17, 0x70, 0x65, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x1a, 0xb3, 0x01, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04,
	0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x61, 0x78, 0x5f,
	0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x4c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f,
	0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x0c,
	0x0a, 0x01, 0x66, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x66, 0x1a, 0xbf, 0x01, 0x0a,
	0x06, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x43, 0x0a,
	0x1e, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x5f,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x77, 0x69, 0x64, 0x74, 0x68, 0x43, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x65, 0x64, 0x4c, 0x61, 0x73, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x6f, 0x77, 0x5f, 0x77, 0x61, 0x74, 0x65, 0x72, 0x6d,
	0x61, 0x72, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6c, 0x6f, 0x77, 0x57, 0x61,
	0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0xf1,
	0x01, 0x0a, 0x0f, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x0a, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x73, 0x67, 0x73, 0x2e, 0x52, 0x65,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x65,
	0x77, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x09, 0x6e, 0x65, 0x77, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x0c, 0x72,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x6e,
	0x65, 0x77, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x6d, 0x73, 0x67, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x09, 0x6e, 0x65,
	0x77, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x31, 0x0a, 0x09, 0x4e, 0x65, 0x77, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x22, 0xe2, 0x02, 0x0a, 0x0a, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x74, 0x12, 0x27, 0x0a, 0x07, 0x71, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6d, 0x73, 0x67, 0x73, 0x2e, 0x51, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x48, 0x00, 0x52, 0x06, 0x71, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x27, 0x0a, 0x07, 0x70, 0x5f,
	0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6d, 0x73,
	0x67, 0x73, 0x2e, 0x50, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x48, 0x00, 0x52, 0x06, 0x70, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x27, 0x0a, 0x07, 0x63, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6d, 0x73, 0x67, 0x73, 0x2e, 0x43, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x48, 0x00, 0x52, 0x06, 0x63, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x27, 0x0a, 0x07,
	0x6e, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x6d, 0x73, 0x67, 0x73, 0x2e, 0x4e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x48, 0x00, 0x52, 0x06, 0x6e,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x27, 0x0a, 0x07, 0x66, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6d, 0x73, 0x67, 0x73, 0x2e, 0x46, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x48, 0x00, 0x52, 0x06, 0x66, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x2b,
	0x0a, 0x09, 0x65, 0x5f, 0x63, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x73, 0x67, 0x73, 0x2e, 0x45, 0x43, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x48, 0x00, 0x52, 0x07, 0x65, 0x43, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x27, 0x0a, 0x07, 0x74,
	0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6d,
	0x73, 0x67, 0x73, 0x2e, 0x54, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x48, 0x00, 0x52, 0x06, 0x74, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x29, 0x0a, 0x07, 0x73, 0x75, 0x73, 0x70, 0x65, 0x63, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x73, 0x67, 0x73, 0x2e, 0x53, 0x75, 0x73,
	0x70, 0x65, 0x63, 0x74, 0x48, 0x00, 0x52, 0x07, 0x73, 0x75, 0x73, 0x70, 0x65, 0x63, 0x74, 0x42,
	0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x55, 0x0a, 0x06, 0x4e, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x65, 0x71, 0x5f, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x05, 0x73, 0x65, 0x71, 0x4e, 0x6f, 0x12, 0x34, 0x0a, 0x0c, 0x65, 0x70, 0x6f, 0x63,
	0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x6d, 0x73, 0x67, 0x73, 0x2e, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x0b, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x47,
	0x0a, 0x06, 0x46, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x3d, 0x0a, 0x11, 0x65, 0x6e, 0x64, 0x73,
	0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x73, 0x67, 0x73, 0x2e, 0x45, 0x70, 0x6f, 0x63, 0x68,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0f, 0x65, 0x6e, 0x64, 0x73, 0x45, 0x70, 0x6f, 0x63,
	0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x2c, 0x0a, 0x07, 0x45, 0x43, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x35, 0x0a, 0x06, 0x54, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x15, 0x0a, 0x06, 0x73, 0x65, 0x71, 0x5f, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x73, 0x65, 0x71, 0x4e, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x65, 0x0a, 0x06,
	0x51, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x65, 0x71, 0x5f, 0x6e, 0x6f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x73, 0x65, 0x71, 0x4e, 0x6f, 0x12, 0x16, 0x0a,
	0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x64,
	0x69, 0x67, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x73, 0x67, 0x73, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x6b, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x22, 0x37, 0x0a, 0x06, 0x50, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x15, 0x0a,
	0x06, 0x73, 0x65, 0x71, 0x5f, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x73,
	0x65, 0x71, 0x4e, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x22, 0x83, 0x01, 0x0a,
	0x06, 0x43, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x65, 0x71, 0x5f, 0x6e,
	0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x73, 0x65, 0x71, 0x4e, 0x6f, 0x12, 0x29,
	0x0a, 0x10, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x37, 0x0a, 0x0d, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x6d, 0x73, 0x67, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x22, 0xb9, 0x06, 0x0a, 0x03, 0x4d, 0x73, 0x67, 0x12, 0x32, 0x0a, 0x0a, 0x70, 0x72,
	0x65, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x6d, 0x73, 0x67, 0x73, 0x2e, 0x50, 0x72, 0x65, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65,
	0x48, 0x00, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x12, 0x29,
	0x0a, 0x07, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x6d, 0x73, 0x67, 0x73, 0x2e, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x48, 0x00,
	0x52, 0x07, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6d, 0x73, 0x67, 0x73,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x48, 0x00, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x12, 0x32, 0x0a, 0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x73, 0x67, 0x73, 0x2e, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x07, 0x73, 0x75, 0x73, 0x70, 0x65, 0x63, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x73, 0x67, 0x73, 0x2e, 0x53, 0x75,
	0x73, 0x70, 0x65, 0x63, 0x74, 0x48, 0x00, 0x52, 0x07, 0x73, 0x75, 0x73, 0x70, 0x65, 0x63, 0x74,
	0x12, 0x36, 0x0a, 0x0c, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x73, 0x67, 0x73, 0x2e, 0x45, 0x70,
	0x6f, 0x63, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x65, 0x70, 0x6f,
	0x63, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x40, 0x0a, 0x10, 0x65, 0x70, 0x6f, 0x63,
	0x68, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x61, 0x63, 0x6b, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x73, 0x67, 0x73, 0x2e, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x0e, 0x65, 0x70, 0x6f, 0x63,
	0x68, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x63, 0x6b, 0x12, 0x2d, 0x0a, 0x09, 0x6e, 0x65,
	0x77, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x6d, 0x73, 0x67, 0x73, 0x2e, 0x4e, 0x65, 0x77, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x48, 0x00, 0x52,
	0x08, 0x6e, 0x65, 0x77, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x3c, 0x0a, 0x0e, 0x6e, 0x65, 0x77,
	0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x65, 0x63, 0x68, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x73, 0x67, 0x73, 0x2e, 0x4e, 0x65, 0x77, 0x45, 0x70, 0x6f, 0x63,
	0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x0c, 0x6e, 0x65, 0x77, 0x45, 0x70,
	0x6f, 0x63, 0x68, 0x45, 0x63, 0x68, 0x6f, 0x12, 0x3e, 0x0a, 0x0f, 0x6e, 0x65, 0x77, 0x5f, 0x65,
	0x70, 0x6f, 0x63, 0x68, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x6d, 0x73, 0x67, 0x73, 0x2e, 0x4e, 0x65, 0x77, 0x45, 0x70, 0x6f, 0x63, 0x68,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x0d, 0x6e, 0x65, 0x77, 0x45, 0x70, 0x6f,
	0x63, 0x68, 0x52, 0x65, 0x61, 0x64, 0x79, 0x12, 0x33, 0x0a, 0x0b, 0x66, 0x65, 0x74, 0x63, 0x68,
	0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d,
	0x73, 0x67, 0x73, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x42, 0x61, 0x74, 0x63, 0x68, 0x48, 0x00,
	0x52, 0x0a, 0x66, 0x65, 0x74, 0x63, 0x68, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x39, 0x0a, 0x0d,
	0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x73, 0x67, 0x73, 0x2e, 0x46, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x42, 0x61, 0x74, 0x63, 0x68, 0x48, 0x00, 0x52, 0x0c, 0x66, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x37, 0x0a, 0x0d, 0x66, 0x65, 0x74, 0x63, 0x68,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x6d, 0x73, 0x67, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x6b,
	0x48, 0x00, 0x52, 0x0c, 0x66, 0x65, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3f, 0x0a, 0x0f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x73, 0x67, 0x73,
	0x2e, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x00, 0x52, 0x0e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x33, 0x0a, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x63, 0x6b,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x73, 0x67, 0x73, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x41, 0x63, 0x6b, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x3b,
	0x0a, 0x0a, 0x46, 0x65, 0x74, 0x63, 0x68, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x15, 0x0a, 0x06,
	0x73, 0x65, 0x71, 0x5f, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x73, 0x65,
	0x71, 0x4e, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x22, 0x72, 0x0a, 0x0c, 0x46,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x15, 0x0a, 0x06, 0x73,
	0x65, 0x71, 0x5f, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x73, 0x65, 0x71,
	0x4e, 0x6f, 0x12, 0x33, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x63,
	0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x73, 0x67, 0x73, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x6b, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x41, 0x63, 0x6b, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x22,
	0x66, 0x0a, 0x0e, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x31, 0x0a, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x63, 0x6b,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x73, 0x67, 0x73, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x6b, 0x52, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x41, 0x63, 0x6b, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x22, 0x51, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x15, 0x0a, 0x06, 0x72, 0x65, 0x71, 0x5f, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x72, 0x65, 0x71, 0x4e, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x58, 0x0a, 0x0a, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x65, 0x71, 0x5f, 0x6e, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x72, 0x65, 0x71, 0x4e, 0x6f, 0x12, 0x16, 0x0a, 0x06,
	0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x64, 0x69,
	0x67, 0x65, 0x73, 0x74, 0x22, 0x61, 0x0a, 0x0a, 0x50, 0x72, 0x65, 0x70, 0x72, 0x65, 0x70, 0x61,
	0x72, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x65, 0x71, 0x5f, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x73, 0x65, 0x71, 0x4e, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f,
	0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12,
	0x26, 0x0a, 0x05, 0x62, 0x61, 0x74, 0x63, 0x68, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x6d, 0x73, 0x67, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x6b,
	0x52, 0x05, 0x62, 0x61, 0x74, 0x63, 0x68, 0x22, 0x4e, 0x0a, 0x07, 0x50, 0x72, 0x65, 0x70, 0x61,
	0x72, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x65, 0x71, 0x5f, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x73, 0x65, 0x71, 0x4e, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f,
	0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12,
	0x16, 0x0a, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x22, 0x4d, 0x0a, 0x06, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x65, 0x71, 0x5f, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x05, 0x73, 0x65, 0x71, 0x4e, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x16,
	0x0a, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06,
	0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x22, 0x39, 0x0a, 0x0a, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x65, 0x71, 0x5f, 0x6e, 0x6f, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x73, 0x65, 0x71, 0x4e, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x1f, 0x0a, 0x07, 0x53, 0x75, 0x73, 0x70, 0x65, 0x63, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x65, 0x70, 0x6f,
	0x63, 0x68, 0x22, 0x91, 0x02, 0x0a, 0x0b, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x12,
	0x32, 0x0a, 0x0b, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x73, 0x67, 0x73, 0x2e, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0b, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x12, 0x2f, 0x0a, 0x05, 0x70, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x73, 0x67, 0x73, 0x2e, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04,
	0x70, 0x53, 0x65, 0x74, 0x12, 0x2f, 0x0a, 0x05, 0x71, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x73, 0x67, 0x73, 0x2e, 0x45, 0x70, 0x6f, 0x63, 0x68,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x04, 0x71, 0x53, 0x65, 0x74, 0x1a, 0x4f, 0x0a, 0x08, 0x53, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x65, 0x71, 0x5f, 0x6e,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x73, 0x65, 0x71, 0x4e, 0x6f, 0x12, 0x16,
	0x0a, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06,
	0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x22, 0x66, 0x0a, 0x0e, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x63, 0x6b, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x34, 0x0a, 0x0c, 0x65, 0x70, 0x6f, 0x63,
	0x68, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x6d, 0x73, 0x67, 0x73, 0x2e, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x0b, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x6e,
	0x0a, 0x0b, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x16, 0x0a,
	0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x04, 0x52, 0x07, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12,
	0x2d, 0x0a, 0x12, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x70, 0x6c, 0x61,
	0x6e, 0x6e, 0x65, 0x64, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xab,
	0x01, 0x0a, 0x0e, 0x4e, 0x65, 0x77, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x29, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x73, 0x67, 0x73, 0x2e, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x41, 0x0a, 0x13,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x73, 0x67, 0x73,
	0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x12, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12,
	0x2b, 0x0a, 0x11, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x65, 0x70, 0x72, 0x65, 0x70,
	0x61, 0x72, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x10, 0x66, 0x69, 0x6e, 0x61,
	0x6c, 0x50, 0x72, 0x65, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x73, 0x22, 0xcc, 0x01, 0x0a,
	0x08, 0x4e, 0x65, 0x77, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x33, 0x0a, 0x0a, 0x6e, 0x65, 0x77,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x6d, 0x73, 0x67, 0x73, 0x2e, 0x4e, 0x65, 0x77, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x09, 0x6e, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x45,
	0x0a, 0x0d, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x73, 0x67, 0x73, 0x2e, 0x4e, 0x65, 0x77,
	0x45, 0x70, 0x6f, 0x63, 0x68, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x45, 0x70, 0x6f, 0x63,
	0x68, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0c, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x73, 0x1a, 0x44, 0x0a, 0x11, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x45,
	0x70, 0x6f, 0x63, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6e, 0x6f, 0x64,
	0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x42, 0x28, 0x5a, 0x26, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x66, 0x6c, 0x79, 0x32, 0x70, 0x6c,
	0x61, 0x6e, 0x2f, 0x6d, 0x69, 0x72, 0x62, 0x66, 0x74, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x62,
	0x2f, 0x6d, 0x73, 0x67, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_msgs_msgs_proto_rawDescOnce sync.Once
	file_msgs_msgs_proto_rawDescData = file_msgs_msgs_proto_rawDesc
)

func file_msgs_msgs_proto_rawDescGZIP() []byte {
	file_msgs_msgs_proto_rawDescOnce.Do(func() {
		file_msgs_msgs_proto_rawDescData = protoimpl.X.CompressGZIP(file_msgs_msgs_proto_rawDescData)
	})
	return file_msgs_msgs_proto_rawDescData
}

var file_msgs_msgs_proto_msgTypes = make([]protoimpl.MessageInfo, 31)
var file_msgs_msgs_proto_goTypes = []interface{}{
	(*NetworkState)(nil),               // 0: msgs.NetworkState
	(*Reconfiguration)(nil),            // 1: msgs.Reconfiguration
	(*Persistent)(nil),                 // 2: msgs.Persistent
	(*NEntry)(nil),                     // 3: msgs.NEntry
	(*FEntry)(nil),                     // 4: msgs.FEntry
	(*ECEntry)(nil),                    // 5: msgs.ECEntry
	(*TEntry)(nil),                     // 6: msgs.TEntry
	(*QEntry)(nil),                     // 7: msgs.QEntry
	(*PEntry)(nil),                     // 8: msgs.PEntry
	(*CEntry)(nil),                     // 9: msgs.CEntry
	(*Msg)(nil),                        // 10: msgs.Msg
	(*FetchBatch)(nil),                 // 11: msgs.FetchBatch
	(*ForwardBatch)(nil),               // 12: msgs.ForwardBatch
	(*ForwardRequest)(nil),             // 13: msgs.ForwardRequest
	(*Request)(nil),                    // 14: msgs.Request
	(*RequestAck)(nil),                 // 15: msgs.RequestAck
	(*Preprepare)(nil),                 // 16: msgs.Preprepare
	(*Prepare)(nil),                    // 17: msgs.Prepare
	(*Commit)(nil),                     // 18: msgs.Commit
	(*Checkpoint)(nil),                 // 19: msgs.Checkpoint
	(*Suspect)(nil),                    // 20: msgs.Suspect
	(*EpochChange)(nil),                // 21: msgs.EpochChange
	(*EpochChangeAck)(nil),             // 22: msgs.EpochChangeAck
	(*EpochConfig)(nil),                // 23: msgs.EpochConfig
	(*NewEpochConfig)(nil),             // 24: msgs.NewEpochConfig
	(*NewEpoch)(nil),                   // 25: msgs.NewEpoch
	(*NetworkState_Config)(nil),        // 26: msgs.NetworkState.Config
	(*NetworkState_Client)(nil),        // 27: msgs.NetworkState.Client
	(*Reconfiguration_NewClient)(nil),  // 28: msgs.Reconfiguration.NewClient
	(*EpochChange_SetEntry)(nil),       // 29: msgs.EpochChange.SetEntry
	(*NewEpoch_RemoteEpochChange)(nil), // 30: msgs.NewEpoch.RemoteEpochChange
}
var file_msgs_msgs_proto_depIdxs = []int32{
	26, // 0: msgs.NetworkState.config:type_name -> msgs.NetworkState.Config
	27, // 1: msgs.NetworkState.clients:type_name -> msgs.NetworkState.Client
	1,  // 2: msgs.NetworkState.pending_reconfigurations:type_name -> msgs.Reconfiguration
	28, // 3: msgs.Reconfiguration.new_client:type_name -> msgs.Reconfiguration.NewClient
	26, // 4: msgs.Reconfiguration.new_config:type_name -> msgs.NetworkState.Config
	7,  // 5: msgs.Persistent.q_entry:type_name -> msgs.QEntry
	8,  // 6: msgs.Persistent.p_entry:type_name -> msgs.PEntry
	9,  // 7: msgs.Persistent.c_entry:type_name -> msgs.CEntry
	3,  // 8: msgs.Persistent.n_entry:type_name -> msgs.NEntry
	4,  // 9: msgs.Persistent.f_entry:type_name -> msgs.FEntry
	5,  // 10: msgs.Persistent.e_c_entry:type_name -> msgs.ECEntry
	6,  // 11: msgs.Persistent.t_entry:type_name -> msgs.TEntry
	20, // 12: msgs.Persistent.suspect:type_name -> msgs.Suspect
	23, // 13: msgs.NEntry.epoch_config:type_name -> msgs.EpochConfig
	23, // 14: msgs.FEntry.ends_epoch_config:type_name -> msgs.EpochConfig
	15, // 15: msgs.QEntry.requests:type_name -> msgs.RequestAck
	0,  // 16: msgs.CEntry.network_state:type_name -> msgs.NetworkState
	16, // 17: msgs.Msg.preprepare:type_name -> msgs.Preprepare
	17, // 18: msgs.Msg.prepare:type_name -> msgs.Prepare
	18, // 19: msgs.Msg.commit:type_name -> msgs.Commit
	19, // 20: msgs.Msg.checkpoint:type_name -> msgs.Checkpoint
	20, // 21: msgs.Msg.suspect:type_name -> msgs.Suspect
	21, // 22: msgs.Msg.epoch_change:type_name -> msgs.EpochChange
	22, // 23: msgs.Msg.epoch_change_ack:type_name -> msgs.EpochChangeAck
	25, // 24: msgs.Msg.new_epoch:type_name -> msgs.NewEpoch
	24, // 25: msgs.Msg.new_epoch_echo:type_name -> msgs.NewEpochConfig
	24, // 26: msgs.Msg.new_epoch_ready:type_name -> msgs.NewEpochConfig
	11, // 27: msgs.Msg.fetch_batch:type_name -> msgs.FetchBatch
	12, // 28: msgs.Msg.forward_batch:type_name -> msgs.ForwardBatch
	15, // 29: msgs.Msg.fetch_request:type_name -> msgs.RequestAck
	13, // 30: msgs.Msg.forward_request:type_name -> msgs.ForwardRequest
	15, // 31: msgs.Msg.request_ack:type_name -> msgs.RequestAck
	15, // 32: msgs.ForwardBatch.request_acks:type_name -> msgs.RequestAck
	15, // 33: msgs.ForwardRequest.request_ack:type_name -> msgs.RequestAck
	15, // 34: msgs.Preprepare.batch:type_name -> msgs.RequestAck
	19, // 35: msgs.EpochChange.checkpoints:type_name -> msgs.Checkpoint
	29, // 36: msgs.EpochChange.p_set:type_name -> msgs.EpochChange.SetEntry
	29, // 37: msgs.EpochChange.q_set:type_name -> msgs.EpochChange.SetEntry
	21, // 38: msgs.EpochChangeAck.epoch_change:type_name -> msgs.EpochChange
	23, // 39: msgs.NewEpochConfig.config:type_name -> msgs.EpochConfig
	19, // 40: msgs.NewEpochConfig.starting_checkpoint:type_name -> msgs.Checkpoint
	24, // 41: msgs.NewEpoch.new_config:type_name -> msgs.NewEpochConfig
	30, // 42: msgs.NewEpoch.epoch_changes:type_name -> msgs.NewEpoch.RemoteEpochChange
	43, // [43:43] is the sub-list for method output_type
	43, // [43:43] is the sub-list for method input_type
	43, // [43:43] is the sub-list for extension type_name
	43, // [43:43] is the sub-list for extension extendee
	0,  // [0:43] is the sub-list for field type_name
}

func init() { file_msgs_msgs_proto_init() }
func file_msgs_msgs_proto_init() {
	if File_msgs_msgs_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_msgs_msgs_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgs_msgs_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Reconfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgs_msgs_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Persistent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgs_msgs_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgs_msgs_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgs_msgs_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ECEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgs_msgs_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgs_msgs_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgs_msgs_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgs_msgs_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgs_msgs_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Msg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgs_msgs_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchBatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgs_msgs_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForwardBatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgs_msgs_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForwardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgs_msgs_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgs_msgs_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgs_msgs_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Preprepare); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgs_msgs_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Prepare); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgs_msgs_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Commit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgs_msgs_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Checkpoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgs_msgs_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Suspect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgs_msgs_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EpochChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgs_msgs_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EpochChangeAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgs_msgs_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EpochConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgs_msgs_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewEpochConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgs_msgs_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewEpoch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgs_msgs_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkState_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgs_msgs_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkState_Client); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgs_msgs_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Reconfiguration_NewClient); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgs_msgs_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EpochChange_SetEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgs_msgs_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewEpoch_RemoteEpochChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_msgs_msgs_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*Reconfiguration_NewClient_)(nil),
		(*Reconfiguration_RemoveClient)(nil),
		(*Reconfiguration_NewConfig)(nil),
	}
	file_msgs_msgs_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*Persistent_QEntry)(nil),
		(*Persistent_PEntry)(nil),
		(*Persistent_CEntry)(nil),
		(*Persistent_NEntry)(nil),
		(*Persistent_FEntry)(nil),
		(*Persistent_ECEntry)(nil),
		(*Persistent_TEntry)(nil),
		(*Persistent_Suspect)(nil),
	}
	file_msgs_msgs_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*Msg_Preprepare)(nil),
		(*Msg_Prepare)(nil),
		(*Msg_Commit)(nil),
		(*Msg_Checkpoint)(nil),
		(*Msg_Suspect)(nil),
		(*Msg_EpochChange)(nil),
		(*Msg_EpochChangeAck)(nil),
		(*Msg_NewEpoch)(nil),
		(*Msg_NewEpochEcho)(nil),
		(*Msg_NewEpochReady)(nil),
		(*Msg_FetchBatch)(nil),
		(*Msg_ForwardBatch)(nil),
		(*Msg_FetchRequest)(nil),
		(*Msg_ForwardRequest)(nil),
		(*Msg_RequestAck)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_msgs_msgs_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   31,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_msgs_msgs_proto_goTypes,
		DependencyIndexes: file_msgs_msgs_proto_depIdxs,
		MessageInfos:      file_msgs_msgs_proto_msgTypes,
	}.Build()
	File_msgs_msgs_proto = out.File
	file_msgs_msgs_proto_rawDesc = nil
	file_msgs_msgs_proto_goTypes = nil
	file_msgs_msgs_proto_depIdxs = nil
}
