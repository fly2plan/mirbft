//
//Copyright IBM Corp. All Rights Reserved.
//
//SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.18.1
// source: state/state.proto

package state

import (
	msgs "github.com/fly2plan/mirbft/pkg/pb/msgs"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Event represents a state event to be injected into the state machine
type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TODO, normalize naming, for instance Complete/Completed
	//
	// Types that are assignable to Type:
	//	*Event_Initialize
	//	*Event_LoadPersistedEntry
	//	*Event_CompleteInitialization
	//	*Event_HashResult
	//	*Event_CheckpointResult
	//	*Event_RequestPersisted
	//	*Event_StateTransferComplete
	//	*Event_StateTransferFailed
	//	*Event_Step
	//	*Event_TickElapsed
	//	*Event_ActionsReceived
	Type isEvent_Type `protobuf_oneof:"type"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_state_state_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_state_state_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_state_state_proto_rawDescGZIP(), []int{0}
}

func (m *Event) GetType() isEvent_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *Event) GetInitialize() *EventInitialParameters {
	if x, ok := x.GetType().(*Event_Initialize); ok {
		return x.Initialize
	}
	return nil
}

func (x *Event) GetLoadPersistedEntry() *EventLoadPersistedEntry {
	if x, ok := x.GetType().(*Event_LoadPersistedEntry); ok {
		return x.LoadPersistedEntry
	}
	return nil
}

func (x *Event) GetCompleteInitialization() *EventLoadCompleted {
	if x, ok := x.GetType().(*Event_CompleteInitialization); ok {
		return x.CompleteInitialization
	}
	return nil
}

func (x *Event) GetHashResult() *EventHashResult {
	if x, ok := x.GetType().(*Event_HashResult); ok {
		return x.HashResult
	}
	return nil
}

func (x *Event) GetCheckpointResult() *EventCheckpointResult {
	if x, ok := x.GetType().(*Event_CheckpointResult); ok {
		return x.CheckpointResult
	}
	return nil
}

func (x *Event) GetRequestPersisted() *EventRequestPersisted {
	if x, ok := x.GetType().(*Event_RequestPersisted); ok {
		return x.RequestPersisted
	}
	return nil
}

func (x *Event) GetStateTransferComplete() *EventStateTransferComplete {
	if x, ok := x.GetType().(*Event_StateTransferComplete); ok {
		return x.StateTransferComplete
	}
	return nil
}

func (x *Event) GetStateTransferFailed() *EventStateTransferFailed {
	if x, ok := x.GetType().(*Event_StateTransferFailed); ok {
		return x.StateTransferFailed
	}
	return nil
}

func (x *Event) GetStep() *EventStep {
	if x, ok := x.GetType().(*Event_Step); ok {
		return x.Step
	}
	return nil
}

func (x *Event) GetTickElapsed() *EventTickElapsed {
	if x, ok := x.GetType().(*Event_TickElapsed); ok {
		return x.TickElapsed
	}
	return nil
}

func (x *Event) GetActionsReceived() *EventActionsReceived {
	if x, ok := x.GetType().(*Event_ActionsReceived); ok {
		return x.ActionsReceived
	}
	return nil
}

type isEvent_Type interface {
	isEvent_Type()
}

type Event_Initialize struct {
	Initialize *EventInitialParameters `protobuf:"bytes,1,opt,name=initialize,proto3,oneof"`
}

type Event_LoadPersistedEntry struct {
	LoadPersistedEntry *EventLoadPersistedEntry `protobuf:"bytes,2,opt,name=load_persisted_entry,json=loadPersistedEntry,proto3,oneof"`
}

type Event_CompleteInitialization struct {
	CompleteInitialization *EventLoadCompleted `protobuf:"bytes,3,opt,name=complete_initialization,json=completeInitialization,proto3,oneof"`
}

type Event_HashResult struct {
	HashResult *EventHashResult `protobuf:"bytes,4,opt,name=hash_result,json=hashResult,proto3,oneof"`
}

type Event_CheckpointResult struct {
	CheckpointResult *EventCheckpointResult `protobuf:"bytes,5,opt,name=checkpoint_result,json=checkpointResult,proto3,oneof"`
}

type Event_RequestPersisted struct {
	RequestPersisted *EventRequestPersisted `protobuf:"bytes,6,opt,name=request_persisted,json=requestPersisted,proto3,oneof"`
}

type Event_StateTransferComplete struct {
	StateTransferComplete *EventStateTransferComplete `protobuf:"bytes,7,opt,name=state_transfer_complete,json=stateTransferComplete,proto3,oneof"`
}

type Event_StateTransferFailed struct {
	StateTransferFailed *EventStateTransferFailed `protobuf:"bytes,8,opt,name=state_transfer_failed,json=stateTransferFailed,proto3,oneof"`
}

type Event_Step struct {
	Step *EventStep `protobuf:"bytes,9,opt,name=step,proto3,oneof"`
}

type Event_TickElapsed struct {
	TickElapsed *EventTickElapsed `protobuf:"bytes,10,opt,name=tick_elapsed,json=tickElapsed,proto3,oneof"`
}

type Event_ActionsReceived struct {
	ActionsReceived *EventActionsReceived `protobuf:"bytes,11,opt,name=actions_received,json=actionsReceived,proto3,oneof"`
}

func (*Event_Initialize) isEvent_Type() {}

func (*Event_LoadPersistedEntry) isEvent_Type() {}

func (*Event_CompleteInitialization) isEvent_Type() {}

func (*Event_HashResult) isEvent_Type() {}

func (*Event_CheckpointResult) isEvent_Type() {}

func (*Event_RequestPersisted) isEvent_Type() {}

func (*Event_StateTransferComplete) isEvent_Type() {}

func (*Event_StateTransferFailed) isEvent_Type() {}

func (*Event_Step) isEvent_Type() {}

func (*Event_TickElapsed) isEvent_Type() {}

func (*Event_ActionsReceived) isEvent_Type() {}

type EventInitialParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	BatchSize            uint32 `protobuf:"varint,2,opt,name=batch_size,json=batchSize,proto3" json:"batch_size,omitempty"`
	HeartbeatTicks       uint32 `protobuf:"varint,3,opt,name=heartbeat_ticks,json=heartbeatTicks,proto3" json:"heartbeat_ticks,omitempty"`
	SuspectTicks         uint32 `protobuf:"varint,4,opt,name=suspect_ticks,json=suspectTicks,proto3" json:"suspect_ticks,omitempty"`
	NewEpochTimeoutTicks uint32 `protobuf:"varint,5,opt,name=new_epoch_timeout_ticks,json=newEpochTimeoutTicks,proto3" json:"new_epoch_timeout_ticks,omitempty"`
	BufferSize           uint32 `protobuf:"varint,6,opt,name=buffer_size,json=bufferSize,proto3" json:"buffer_size,omitempty"`
}

func (x *EventInitialParameters) Reset() {
	*x = EventInitialParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_state_state_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventInitialParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventInitialParameters) ProtoMessage() {}

func (x *EventInitialParameters) ProtoReflect() protoreflect.Message {
	mi := &file_state_state_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventInitialParameters.ProtoReflect.Descriptor instead.
func (*EventInitialParameters) Descriptor() ([]byte, []int) {
	return file_state_state_proto_rawDescGZIP(), []int{1}
}

func (x *EventInitialParameters) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *EventInitialParameters) GetBatchSize() uint32 {
	if x != nil {
		return x.BatchSize
	}
	return 0
}

func (x *EventInitialParameters) GetHeartbeatTicks() uint32 {
	if x != nil {
		return x.HeartbeatTicks
	}
	return 0
}

func (x *EventInitialParameters) GetSuspectTicks() uint32 {
	if x != nil {
		return x.SuspectTicks
	}
	return 0
}

func (x *EventInitialParameters) GetNewEpochTimeoutTicks() uint32 {
	if x != nil {
		return x.NewEpochTimeoutTicks
	}
	return 0
}

func (x *EventInitialParameters) GetBufferSize() uint32 {
	if x != nil {
		return x.BufferSize
	}
	return 0
}

type EventLoadPersistedEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index uint64           `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Entry *msgs.Persistent `protobuf:"bytes,2,opt,name=entry,proto3" json:"entry,omitempty"`
}

func (x *EventLoadPersistedEntry) Reset() {
	*x = EventLoadPersistedEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_state_state_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventLoadPersistedEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventLoadPersistedEntry) ProtoMessage() {}

func (x *EventLoadPersistedEntry) ProtoReflect() protoreflect.Message {
	mi := &file_state_state_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventLoadPersistedEntry.ProtoReflect.Descriptor instead.
func (*EventLoadPersistedEntry) Descriptor() ([]byte, []int) {
	return file_state_state_proto_rawDescGZIP(), []int{2}
}

func (x *EventLoadPersistedEntry) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *EventLoadPersistedEntry) GetEntry() *msgs.Persistent {
	if x != nil {
		return x.Entry
	}
	return nil
}

type EventLoadCompleted struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EventLoadCompleted) Reset() {
	*x = EventLoadCompleted{}
	if protoimpl.UnsafeEnabled {
		mi := &file_state_state_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventLoadCompleted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventLoadCompleted) ProtoMessage() {}

func (x *EventLoadCompleted) ProtoReflect() protoreflect.Message {
	mi := &file_state_state_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventLoadCompleted.ProtoReflect.Descriptor instead.
func (*EventLoadCompleted) Descriptor() ([]byte, []int) {
	return file_state_state_proto_rawDescGZIP(), []int{3}
}

type EventCheckpointResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeqNo        uint64             `protobuf:"varint,1,opt,name=seq_no,json=seqNo,proto3" json:"seq_no,omitempty"`
	Value        []byte             `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	NetworkState *msgs.NetworkState `protobuf:"bytes,3,opt,name=network_state,json=networkState,proto3" json:"network_state,omitempty"`
	Reconfigured bool               `protobuf:"varint,4,opt,name=reconfigured,proto3" json:"reconfigured,omitempty"`
}

func (x *EventCheckpointResult) Reset() {
	*x = EventCheckpointResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_state_state_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventCheckpointResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventCheckpointResult) ProtoMessage() {}

func (x *EventCheckpointResult) ProtoReflect() protoreflect.Message {
	mi := &file_state_state_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventCheckpointResult.ProtoReflect.Descriptor instead.
func (*EventCheckpointResult) Descriptor() ([]byte, []int) {
	return file_state_state_proto_rawDescGZIP(), []int{4}
}

func (x *EventCheckpointResult) GetSeqNo() uint64 {
	if x != nil {
		return x.SeqNo
	}
	return 0
}

func (x *EventCheckpointResult) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *EventCheckpointResult) GetNetworkState() *msgs.NetworkState {
	if x != nil {
		return x.NetworkState
	}
	return nil
}

func (x *EventCheckpointResult) GetReconfigured() bool {
	if x != nil {
		return x.Reconfigured
	}
	return false
}

type EventRequestPersisted struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestAck *msgs.RequestAck `protobuf:"bytes,1,opt,name=request_ack,json=requestAck,proto3" json:"request_ack,omitempty"`
}

func (x *EventRequestPersisted) Reset() {
	*x = EventRequestPersisted{}
	if protoimpl.UnsafeEnabled {
		mi := &file_state_state_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventRequestPersisted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventRequestPersisted) ProtoMessage() {}

func (x *EventRequestPersisted) ProtoReflect() protoreflect.Message {
	mi := &file_state_state_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventRequestPersisted.ProtoReflect.Descriptor instead.
func (*EventRequestPersisted) Descriptor() ([]byte, []int) {
	return file_state_state_proto_rawDescGZIP(), []int{5}
}

func (x *EventRequestPersisted) GetRequestAck() *msgs.RequestAck {
	if x != nil {
		return x.RequestAck
	}
	return nil
}

type EventStateTransferComplete struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeqNo           uint64             `protobuf:"varint,1,opt,name=seq_no,json=seqNo,proto3" json:"seq_no,omitempty"`
	CheckpointValue []byte             `protobuf:"bytes,2,opt,name=checkpoint_value,json=checkpointValue,proto3" json:"checkpoint_value,omitempty"`
	NetworkState    *msgs.NetworkState `protobuf:"bytes,3,opt,name=network_state,json=networkState,proto3" json:"network_state,omitempty"`
}

func (x *EventStateTransferComplete) Reset() {
	*x = EventStateTransferComplete{}
	if protoimpl.UnsafeEnabled {
		mi := &file_state_state_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventStateTransferComplete) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventStateTransferComplete) ProtoMessage() {}

func (x *EventStateTransferComplete) ProtoReflect() protoreflect.Message {
	mi := &file_state_state_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventStateTransferComplete.ProtoReflect.Descriptor instead.
func (*EventStateTransferComplete) Descriptor() ([]byte, []int) {
	return file_state_state_proto_rawDescGZIP(), []int{6}
}

func (x *EventStateTransferComplete) GetSeqNo() uint64 {
	if x != nil {
		return x.SeqNo
	}
	return 0
}

func (x *EventStateTransferComplete) GetCheckpointValue() []byte {
	if x != nil {
		return x.CheckpointValue
	}
	return nil
}

func (x *EventStateTransferComplete) GetNetworkState() *msgs.NetworkState {
	if x != nil {
		return x.NetworkState
	}
	return nil
}

type EventStateTransferFailed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeqNo           uint64 `protobuf:"varint,1,opt,name=seq_no,json=seqNo,proto3" json:"seq_no,omitempty"`
	CheckpointValue []byte `protobuf:"bytes,2,opt,name=checkpoint_value,json=checkpointValue,proto3" json:"checkpoint_value,omitempty"`
}

func (x *EventStateTransferFailed) Reset() {
	*x = EventStateTransferFailed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_state_state_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventStateTransferFailed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventStateTransferFailed) ProtoMessage() {}

func (x *EventStateTransferFailed) ProtoReflect() protoreflect.Message {
	mi := &file_state_state_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventStateTransferFailed.ProtoReflect.Descriptor instead.
func (*EventStateTransferFailed) Descriptor() ([]byte, []int) {
	return file_state_state_proto_rawDescGZIP(), []int{7}
}

func (x *EventStateTransferFailed) GetSeqNo() uint64 {
	if x != nil {
		return x.SeqNo
	}
	return 0
}

func (x *EventStateTransferFailed) GetCheckpointValue() []byte {
	if x != nil {
		return x.CheckpointValue
	}
	return nil
}

type EventStep struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source uint64    `protobuf:"varint,1,opt,name=source,proto3" json:"source,omitempty"`
	Msg    *msgs.Msg `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *EventStep) Reset() {
	*x = EventStep{}
	if protoimpl.UnsafeEnabled {
		mi := &file_state_state_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventStep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventStep) ProtoMessage() {}

func (x *EventStep) ProtoReflect() protoreflect.Message {
	mi := &file_state_state_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventStep.ProtoReflect.Descriptor instead.
func (*EventStep) Descriptor() ([]byte, []int) {
	return file_state_state_proto_rawDescGZIP(), []int{8}
}

func (x *EventStep) GetSource() uint64 {
	if x != nil {
		return x.Source
	}
	return 0
}

func (x *EventStep) GetMsg() *msgs.Msg {
	if x != nil {
		return x.Msg
	}
	return nil
}

type EventTickElapsed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EventTickElapsed) Reset() {
	*x = EventTickElapsed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_state_state_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventTickElapsed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventTickElapsed) ProtoMessage() {}

func (x *EventTickElapsed) ProtoReflect() protoreflect.Message {
	mi := &file_state_state_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventTickElapsed.ProtoReflect.Descriptor instead.
func (*EventTickElapsed) Descriptor() ([]byte, []int) {
	return file_state_state_proto_rawDescGZIP(), []int{9}
}

type HashOrigin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//	*HashOrigin_Batch_
	//	*HashOrigin_EpochChange_
	//	*HashOrigin_VerifyBatch_
	Type isHashOrigin_Type `protobuf_oneof:"type"`
}

func (x *HashOrigin) Reset() {
	*x = HashOrigin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_state_state_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HashOrigin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HashOrigin) ProtoMessage() {}

func (x *HashOrigin) ProtoReflect() protoreflect.Message {
	mi := &file_state_state_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HashOrigin.ProtoReflect.Descriptor instead.
func (*HashOrigin) Descriptor() ([]byte, []int) {
	return file_state_state_proto_rawDescGZIP(), []int{10}
}

func (m *HashOrigin) GetType() isHashOrigin_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *HashOrigin) GetBatch() *HashOrigin_Batch {
	if x, ok := x.GetType().(*HashOrigin_Batch_); ok {
		return x.Batch
	}
	return nil
}

func (x *HashOrigin) GetEpochChange() *HashOrigin_EpochChange {
	if x, ok := x.GetType().(*HashOrigin_EpochChange_); ok {
		return x.EpochChange
	}
	return nil
}

func (x *HashOrigin) GetVerifyBatch() *HashOrigin_VerifyBatch {
	if x, ok := x.GetType().(*HashOrigin_VerifyBatch_); ok {
		return x.VerifyBatch
	}
	return nil
}

type isHashOrigin_Type interface {
	isHashOrigin_Type()
}

type HashOrigin_Batch_ struct {
	Batch *HashOrigin_Batch `protobuf:"bytes,1,opt,name=batch,proto3,oneof"`
}

type HashOrigin_EpochChange_ struct {
	EpochChange *HashOrigin_EpochChange `protobuf:"bytes,2,opt,name=epoch_change,json=epochChange,proto3,oneof"`
}

type HashOrigin_VerifyBatch_ struct {
	VerifyBatch *HashOrigin_VerifyBatch `protobuf:"bytes,3,opt,name=verify_batch,json=verifyBatch,proto3,oneof"`
}

func (*HashOrigin_Batch_) isHashOrigin_Type() {}

func (*HashOrigin_EpochChange_) isHashOrigin_Type() {}

func (*HashOrigin_VerifyBatch_) isHashOrigin_Type() {}

type EventHashResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Digest []byte      `protobuf:"bytes,1,opt,name=digest,proto3" json:"digest,omitempty"`
	Origin *HashOrigin `protobuf:"bytes,2,opt,name=origin,proto3" json:"origin,omitempty"`
}

func (x *EventHashResult) Reset() {
	*x = EventHashResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_state_state_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventHashResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventHashResult) ProtoMessage() {}

func (x *EventHashResult) ProtoReflect() protoreflect.Message {
	mi := &file_state_state_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventHashResult.ProtoReflect.Descriptor instead.
func (*EventHashResult) Descriptor() ([]byte, []int) {
	return file_state_state_proto_rawDescGZIP(), []int{11}
}

func (x *EventHashResult) GetDigest() []byte {
	if x != nil {
		return x.Digest
	}
	return nil
}

func (x *EventHashResult) GetOrigin() *HashOrigin {
	if x != nil {
		return x.Origin
	}
	return nil
}

type EventActionsReceived struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EventActionsReceived) Reset() {
	*x = EventActionsReceived{}
	if protoimpl.UnsafeEnabled {
		mi := &file_state_state_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventActionsReceived) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventActionsReceived) ProtoMessage() {}

func (x *EventActionsReceived) ProtoReflect() protoreflect.Message {
	mi := &file_state_state_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventActionsReceived.ProtoReflect.Descriptor instead.
func (*EventActionsReceived) Descriptor() ([]byte, []int) {
	return file_state_state_proto_rawDescGZIP(), []int{12}
}

type Action struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//	*Action_Send
	//	*Action_Hash
	//	*Action_AppendWriteAhead
	//	*Action_TruncateWriteAhead
	//	*Action_Commit
	//	*Action_Checkpoint
	//	*Action_AllocatedRequest
	//	*Action_CorrectRequest
	//	*Action_ForwardRequest
	//	*Action_StateTransfer
	//	*Action_StateApplied
	Type isAction_Type `protobuf_oneof:"type"`
}

func (x *Action) Reset() {
	*x = Action{}
	if protoimpl.UnsafeEnabled {
		mi := &file_state_state_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Action) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Action) ProtoMessage() {}

func (x *Action) ProtoReflect() protoreflect.Message {
	mi := &file_state_state_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Action.ProtoReflect.Descriptor instead.
func (*Action) Descriptor() ([]byte, []int) {
	return file_state_state_proto_rawDescGZIP(), []int{13}
}

func (m *Action) GetType() isAction_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *Action) GetSend() *ActionSend {
	if x, ok := x.GetType().(*Action_Send); ok {
		return x.Send
	}
	return nil
}

func (x *Action) GetHash() *ActionHashRequest {
	if x, ok := x.GetType().(*Action_Hash); ok {
		return x.Hash
	}
	return nil
}

func (x *Action) GetAppendWriteAhead() *ActionWrite {
	if x, ok := x.GetType().(*Action_AppendWriteAhead); ok {
		return x.AppendWriteAhead
	}
	return nil
}

func (x *Action) GetTruncateWriteAhead() *ActionTruncate {
	if x, ok := x.GetType().(*Action_TruncateWriteAhead); ok {
		return x.TruncateWriteAhead
	}
	return nil
}

func (x *Action) GetCommit() *ActionCommit {
	if x, ok := x.GetType().(*Action_Commit); ok {
		return x.Commit
	}
	return nil
}

func (x *Action) GetCheckpoint() *ActionCheckpoint {
	if x, ok := x.GetType().(*Action_Checkpoint); ok {
		return x.Checkpoint
	}
	return nil
}

func (x *Action) GetAllocatedRequest() *ActionRequestSlot {
	if x, ok := x.GetType().(*Action_AllocatedRequest); ok {
		return x.AllocatedRequest
	}
	return nil
}

func (x *Action) GetCorrectRequest() *msgs.RequestAck {
	if x, ok := x.GetType().(*Action_CorrectRequest); ok {
		return x.CorrectRequest
	}
	return nil
}

func (x *Action) GetForwardRequest() *ActionForward {
	if x, ok := x.GetType().(*Action_ForwardRequest); ok {
		return x.ForwardRequest
	}
	return nil
}

func (x *Action) GetStateTransfer() *ActionStateTarget {
	if x, ok := x.GetType().(*Action_StateTransfer); ok {
		return x.StateTransfer
	}
	return nil
}

func (x *Action) GetStateApplied() *ActionStateApplied {
	if x, ok := x.GetType().(*Action_StateApplied); ok {
		return x.StateApplied
	}
	return nil
}

type isAction_Type interface {
	isAction_Type()
}

type Action_Send struct {
	Send *ActionSend `protobuf:"bytes,1,opt,name=send,proto3,oneof"`
}

type Action_Hash struct {
	Hash *ActionHashRequest `protobuf:"bytes,2,opt,name=hash,proto3,oneof"`
}

type Action_AppendWriteAhead struct {
	AppendWriteAhead *ActionWrite `protobuf:"bytes,3,opt,name=append_write_ahead,json=appendWriteAhead,proto3,oneof"`
}

type Action_TruncateWriteAhead struct {
	TruncateWriteAhead *ActionTruncate `protobuf:"bytes,4,opt,name=truncate_write_ahead,json=truncateWriteAhead,proto3,oneof"`
}

type Action_Commit struct {
	Commit *ActionCommit `protobuf:"bytes,5,opt,name=commit,proto3,oneof"`
}

type Action_Checkpoint struct {
	Checkpoint *ActionCheckpoint `protobuf:"bytes,6,opt,name=checkpoint,proto3,oneof"`
}

type Action_AllocatedRequest struct {
	AllocatedRequest *ActionRequestSlot `protobuf:"bytes,7,opt,name=allocated_request,json=allocatedRequest,proto3,oneof"`
}

type Action_CorrectRequest struct {
	CorrectRequest *msgs.RequestAck `protobuf:"bytes,8,opt,name=correct_request,json=correctRequest,proto3,oneof"`
}

type Action_ForwardRequest struct {
	ForwardRequest *ActionForward `protobuf:"bytes,9,opt,name=forward_request,json=forwardRequest,proto3,oneof"`
}

type Action_StateTransfer struct {
	StateTransfer *ActionStateTarget `protobuf:"bytes,10,opt,name=state_transfer,json=stateTransfer,proto3,oneof"`
}

type Action_StateApplied struct {
	StateApplied *ActionStateApplied `protobuf:"bytes,11,opt,name=state_applied,json=stateApplied,proto3,oneof"`
}

func (*Action_Send) isAction_Type() {}

func (*Action_Hash) isAction_Type() {}

func (*Action_AppendWriteAhead) isAction_Type() {}

func (*Action_TruncateWriteAhead) isAction_Type() {}

func (*Action_Commit) isAction_Type() {}

func (*Action_Checkpoint) isAction_Type() {}

func (*Action_AllocatedRequest) isAction_Type() {}

func (*Action_CorrectRequest) isAction_Type() {}

func (*Action_ForwardRequest) isAction_Type() {}

func (*Action_StateTransfer) isAction_Type() {}

func (*Action_StateApplied) isAction_Type() {}

type ActionSend struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Targets []uint64  `protobuf:"varint,1,rep,packed,name=targets,proto3" json:"targets,omitempty"`
	Msg     *msgs.Msg `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *ActionSend) Reset() {
	*x = ActionSend{}
	if protoimpl.UnsafeEnabled {
		mi := &file_state_state_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionSend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionSend) ProtoMessage() {}

func (x *ActionSend) ProtoReflect() protoreflect.Message {
	mi := &file_state_state_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionSend.ProtoReflect.Descriptor instead.
func (*ActionSend) Descriptor() ([]byte, []int) {
	return file_state_state_proto_rawDescGZIP(), []int{14}
}

func (x *ActionSend) GetTargets() []uint64 {
	if x != nil {
		return x.Targets
	}
	return nil
}

func (x *ActionSend) GetMsg() *msgs.Msg {
	if x != nil {
		return x.Msg
	}
	return nil
}

type ActionTruncate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index uint64 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *ActionTruncate) Reset() {
	*x = ActionTruncate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_state_state_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionTruncate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionTruncate) ProtoMessage() {}

func (x *ActionTruncate) ProtoReflect() protoreflect.Message {
	mi := &file_state_state_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionTruncate.ProtoReflect.Descriptor instead.
func (*ActionTruncate) Descriptor() ([]byte, []int) {
	return file_state_state_proto_rawDescGZIP(), []int{15}
}

func (x *ActionTruncate) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

type ActionWrite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index uint64           `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Data  *msgs.Persistent `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ActionWrite) Reset() {
	*x = ActionWrite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_state_state_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionWrite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionWrite) ProtoMessage() {}

func (x *ActionWrite) ProtoReflect() protoreflect.Message {
	mi := &file_state_state_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionWrite.ProtoReflect.Descriptor instead.
func (*ActionWrite) Descriptor() ([]byte, []int) {
	return file_state_state_proto_rawDescGZIP(), []int{16}
}

func (x *ActionWrite) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *ActionWrite) GetData() *msgs.Persistent {
	if x != nil {
		return x.Data
	}
	return nil
}

type ActionCommit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Batch *msgs.QEntry `protobuf:"bytes,1,opt,name=batch,proto3" json:"batch,omitempty"`
}

func (x *ActionCommit) Reset() {
	*x = ActionCommit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_state_state_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionCommit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionCommit) ProtoMessage() {}

func (x *ActionCommit) ProtoReflect() protoreflect.Message {
	mi := &file_state_state_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionCommit.ProtoReflect.Descriptor instead.
func (*ActionCommit) Descriptor() ([]byte, []int) {
	return file_state_state_proto_rawDescGZIP(), []int{17}
}

func (x *ActionCommit) GetBatch() *msgs.QEntry {
	if x != nil {
		return x.Batch
	}
	return nil
}

type ActionCheckpoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeqNo         uint64                      `protobuf:"varint,2,opt,name=seq_no,json=seqNo,proto3" json:"seq_no,omitempty"`
	NetworkConfig *msgs.NetworkState_Config   `protobuf:"bytes,3,opt,name=network_config,json=networkConfig,proto3" json:"network_config,omitempty"`
	ClientStates  []*msgs.NetworkState_Client `protobuf:"bytes,4,rep,name=client_states,json=clientStates,proto3" json:"client_states,omitempty"`
	EpochConfig   *msgs.EpochConfig           `protobuf:"bytes,5,opt,name=epoch_config,json=epochConfig,proto3" json:"epoch_config,omitempty"`
}

func (x *ActionCheckpoint) Reset() {
	*x = ActionCheckpoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_state_state_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionCheckpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionCheckpoint) ProtoMessage() {}

func (x *ActionCheckpoint) ProtoReflect() protoreflect.Message {
	mi := &file_state_state_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionCheckpoint.ProtoReflect.Descriptor instead.
func (*ActionCheckpoint) Descriptor() ([]byte, []int) {
	return file_state_state_proto_rawDescGZIP(), []int{18}
}

func (x *ActionCheckpoint) GetSeqNo() uint64 {
	if x != nil {
		return x.SeqNo
	}
	return 0
}

func (x *ActionCheckpoint) GetNetworkConfig() *msgs.NetworkState_Config {
	if x != nil {
		return x.NetworkConfig
	}
	return nil
}

func (x *ActionCheckpoint) GetClientStates() []*msgs.NetworkState_Client {
	if x != nil {
		return x.ClientStates
	}
	return nil
}

func (x *ActionCheckpoint) GetEpochConfig() *msgs.EpochConfig {
	if x != nil {
		return x.EpochConfig
	}
	return nil
}

type ActionRequestSlot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId uint64 `protobuf:"varint,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	ReqNo    uint64 `protobuf:"varint,2,opt,name=req_no,json=reqNo,proto3" json:"req_no,omitempty"`
}

func (x *ActionRequestSlot) Reset() {
	*x = ActionRequestSlot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_state_state_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionRequestSlot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionRequestSlot) ProtoMessage() {}

func (x *ActionRequestSlot) ProtoReflect() protoreflect.Message {
	mi := &file_state_state_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionRequestSlot.ProtoReflect.Descriptor instead.
func (*ActionRequestSlot) Descriptor() ([]byte, []int) {
	return file_state_state_proto_rawDescGZIP(), []int{19}
}

func (x *ActionRequestSlot) GetClientId() uint64 {
	if x != nil {
		return x.ClientId
	}
	return 0
}

func (x *ActionRequestSlot) GetReqNo() uint64 {
	if x != nil {
		return x.ReqNo
	}
	return 0
}

type ActionForward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Targets []uint64         `protobuf:"varint,1,rep,packed,name=targets,proto3" json:"targets,omitempty"`
	Ack     *msgs.RequestAck `protobuf:"bytes,2,opt,name=ack,proto3" json:"ack,omitempty"`
}

func (x *ActionForward) Reset() {
	*x = ActionForward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_state_state_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionForward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionForward) ProtoMessage() {}

func (x *ActionForward) ProtoReflect() protoreflect.Message {
	mi := &file_state_state_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionForward.ProtoReflect.Descriptor instead.
func (*ActionForward) Descriptor() ([]byte, []int) {
	return file_state_state_proto_rawDescGZIP(), []int{20}
}

func (x *ActionForward) GetTargets() []uint64 {
	if x != nil {
		return x.Targets
	}
	return nil
}

func (x *ActionForward) GetAck() *msgs.RequestAck {
	if x != nil {
		return x.Ack
	}
	return nil
}

type ActionStateApplied struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeqNo        uint64             `protobuf:"varint,1,opt,name=seq_no,json=seqNo,proto3" json:"seq_no,omitempty"`
	NetworkState *msgs.NetworkState `protobuf:"bytes,2,opt,name=network_state,json=networkState,proto3" json:"network_state,omitempty"`
}

func (x *ActionStateApplied) Reset() {
	*x = ActionStateApplied{}
	if protoimpl.UnsafeEnabled {
		mi := &file_state_state_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionStateApplied) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionStateApplied) ProtoMessage() {}

func (x *ActionStateApplied) ProtoReflect() protoreflect.Message {
	mi := &file_state_state_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionStateApplied.ProtoReflect.Descriptor instead.
func (*ActionStateApplied) Descriptor() ([]byte, []int) {
	return file_state_state_proto_rawDescGZIP(), []int{21}
}

func (x *ActionStateApplied) GetSeqNo() uint64 {
	if x != nil {
		return x.SeqNo
	}
	return 0
}

func (x *ActionStateApplied) GetNetworkState() *msgs.NetworkState {
	if x != nil {
		return x.NetworkState
	}
	return nil
}

type ActionHashRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data   [][]byte    `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	Origin *HashOrigin `protobuf:"bytes,2,opt,name=origin,proto3" json:"origin,omitempty"`
}

func (x *ActionHashRequest) Reset() {
	*x = ActionHashRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_state_state_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionHashRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionHashRequest) ProtoMessage() {}

func (x *ActionHashRequest) ProtoReflect() protoreflect.Message {
	mi := &file_state_state_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionHashRequest.ProtoReflect.Descriptor instead.
func (*ActionHashRequest) Descriptor() ([]byte, []int) {
	return file_state_state_proto_rawDescGZIP(), []int{22}
}

func (x *ActionHashRequest) GetData() [][]byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ActionHashRequest) GetOrigin() *HashOrigin {
	if x != nil {
		return x.Origin
	}
	return nil
}

type ActionStateTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeqNo uint64 `protobuf:"varint,1,opt,name=seq_no,json=seqNo,proto3" json:"seq_no,omitempty"`
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ActionStateTarget) Reset() {
	*x = ActionStateTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_state_state_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionStateTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionStateTarget) ProtoMessage() {}

func (x *ActionStateTarget) ProtoReflect() protoreflect.Message {
	mi := &file_state_state_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionStateTarget.ProtoReflect.Descriptor instead.
func (*ActionStateTarget) Descriptor() ([]byte, []int) {
	return file_state_state_proto_rawDescGZIP(), []int{23}
}

func (x *ActionStateTarget) GetSeqNo() uint64 {
	if x != nil {
		return x.SeqNo
	}
	return 0
}

func (x *ActionStateTarget) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type HashOrigin_Batch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source      uint64             `protobuf:"varint,1,opt,name=source,proto3" json:"source,omitempty"`
	Epoch       uint64             `protobuf:"varint,2,opt,name=epoch,proto3" json:"epoch,omitempty"`
	SeqNo       uint64             `protobuf:"varint,3,opt,name=seq_no,json=seqNo,proto3" json:"seq_no,omitempty"`
	RequestAcks []*msgs.RequestAck `protobuf:"bytes,5,rep,name=request_acks,json=requestAcks,proto3" json:"request_acks,omitempty"`
}

func (x *HashOrigin_Batch) Reset() {
	*x = HashOrigin_Batch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_state_state_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HashOrigin_Batch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HashOrigin_Batch) ProtoMessage() {}

func (x *HashOrigin_Batch) ProtoReflect() protoreflect.Message {
	mi := &file_state_state_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HashOrigin_Batch.ProtoReflect.Descriptor instead.
func (*HashOrigin_Batch) Descriptor() ([]byte, []int) {
	return file_state_state_proto_rawDescGZIP(), []int{10, 0}
}

func (x *HashOrigin_Batch) GetSource() uint64 {
	if x != nil {
		return x.Source
	}
	return 0
}

func (x *HashOrigin_Batch) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *HashOrigin_Batch) GetSeqNo() uint64 {
	if x != nil {
		return x.SeqNo
	}
	return 0
}

func (x *HashOrigin_Batch) GetRequestAcks() []*msgs.RequestAck {
	if x != nil {
		return x.RequestAcks
	}
	return nil
}

type HashOrigin_VerifyBatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source         uint64             `protobuf:"varint,1,opt,name=source,proto3" json:"source,omitempty"`
	SeqNo          uint64             `protobuf:"varint,2,opt,name=seq_no,json=seqNo,proto3" json:"seq_no,omitempty"`
	RequestAcks    []*msgs.RequestAck `protobuf:"bytes,3,rep,name=request_acks,json=requestAcks,proto3" json:"request_acks,omitempty"`
	ExpectedDigest []byte             `protobuf:"bytes,4,opt,name=expected_digest,json=expectedDigest,proto3" json:"expected_digest,omitempty"`
}

func (x *HashOrigin_VerifyBatch) Reset() {
	*x = HashOrigin_VerifyBatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_state_state_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HashOrigin_VerifyBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HashOrigin_VerifyBatch) ProtoMessage() {}

func (x *HashOrigin_VerifyBatch) ProtoReflect() protoreflect.Message {
	mi := &file_state_state_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HashOrigin_VerifyBatch.ProtoReflect.Descriptor instead.
func (*HashOrigin_VerifyBatch) Descriptor() ([]byte, []int) {
	return file_state_state_proto_rawDescGZIP(), []int{10, 1}
}

func (x *HashOrigin_VerifyBatch) GetSource() uint64 {
	if x != nil {
		return x.Source
	}
	return 0
}

func (x *HashOrigin_VerifyBatch) GetSeqNo() uint64 {
	if x != nil {
		return x.SeqNo
	}
	return 0
}

func (x *HashOrigin_VerifyBatch) GetRequestAcks() []*msgs.RequestAck {
	if x != nil {
		return x.RequestAcks
	}
	return nil
}

func (x *HashOrigin_VerifyBatch) GetExpectedDigest() []byte {
	if x != nil {
		return x.ExpectedDigest
	}
	return nil
}

type HashOrigin_EpochChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source      uint64            `protobuf:"varint,1,opt,name=source,proto3" json:"source,omitempty"`
	Origin      uint64            `protobuf:"varint,2,opt,name=origin,proto3" json:"origin,omitempty"`
	EpochChange *msgs.EpochChange `protobuf:"bytes,3,opt,name=epoch_change,json=epochChange,proto3" json:"epoch_change,omitempty"`
}

func (x *HashOrigin_EpochChange) Reset() {
	*x = HashOrigin_EpochChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_state_state_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HashOrigin_EpochChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HashOrigin_EpochChange) ProtoMessage() {}

func (x *HashOrigin_EpochChange) ProtoReflect() protoreflect.Message {
	mi := &file_state_state_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HashOrigin_EpochChange.ProtoReflect.Descriptor instead.
func (*HashOrigin_EpochChange) Descriptor() ([]byte, []int) {
	return file_state_state_proto_rawDescGZIP(), []int{10, 2}
}

func (x *HashOrigin_EpochChange) GetSource() uint64 {
	if x != nil {
		return x.Source
	}
	return 0
}

func (x *HashOrigin_EpochChange) GetOrigin() uint64 {
	if x != nil {
		return x.Origin
	}
	return 0
}

func (x *HashOrigin_EpochChange) GetEpochChange() *msgs.EpochChange {
	if x != nil {
		return x.EpochChange
	}
	return nil
}

var File_state_state_proto protoreflect.FileDescriptor

var file_state_state_proto_rawDesc = []byte{
	0x0a, 0x11, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x0f, 0x6d, 0x73, 0x67, 0x73,
	0x2f, 0x6d, 0x73, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb3, 0x06, 0x0a, 0x05,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x0a, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x12, 0x52, 0x0a, 0x14, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x70,
	0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x4c, 0x6f, 0x61, 0x64, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x64, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x48, 0x00, 0x52, 0x12, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x65, 0x72, 0x73,
	0x69, 0x73, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x54, 0x0a, 0x17, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x16, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x39, 0x0a, 0x0b, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52,
	0x0a, 0x68, 0x61, 0x73, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4b, 0x0a, 0x11, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x10, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4b, 0x0a, 0x11, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65,
	0x64, 0x48, 0x00, 0x52, 0x10, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x65, 0x72, 0x73,
	0x69, 0x73, 0x74, 0x65, 0x64, 0x12, 0x5b, 0x0a, 0x17, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x00, 0x52, 0x15, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x12, 0x55, 0x0a, 0x15, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x46, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x48, 0x00, 0x52, 0x13, 0x73, 0x74, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x04, 0x73, 0x74, 0x65,
	0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x65, 0x70, 0x48, 0x00, 0x52, 0x04, 0x73, 0x74, 0x65,
	0x70, 0x12, 0x3c, 0x0a, 0x0c, 0x74, 0x69, 0x63, 0x6b, 0x5f, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x45, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64,
	0x48, 0x00, 0x52, 0x0b, 0x74, 0x69, 0x63, 0x6b, 0x45, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x12,
	0x48, 0x0a, 0x10, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x22, 0xed, 0x01, 0x0a, 0x16, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x62, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x68,
	0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x54,
	0x69, 0x63, 0x6b, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x75, 0x73, 0x70, 0x65, 0x63, 0x74, 0x5f,
	0x74, 0x69, 0x63, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x75, 0x73,
	0x70, 0x65, 0x63, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x73, 0x12, 0x35, 0x0a, 0x17, 0x6e, 0x65, 0x77,
	0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x74,
	0x69, 0x63, 0x6b, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x6e, 0x65, 0x77, 0x45,
	0x70, 0x6f, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x53, 0x69, 0x7a,
	0x65, 0x22, 0x57, 0x0a, 0x17, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x61, 0x64, 0x50, 0x65,
	0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x26, 0x0a, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x73, 0x67, 0x73, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x74, 0x52, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x14, 0x0a, 0x12, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x22, 0xa1, 0x01, 0x0a, 0x15, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x65,
	0x71, 0x5f, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x73, 0x65, 0x71, 0x4e,
	0x6f, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x37, 0x0a, 0x0d, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x6d, 0x73, 0x67, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x0c, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x65, 0x64, 0x22, 0x4a, 0x0a, 0x15, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x64, 0x12, 0x31, 0x0a,
	0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x73, 0x67, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x41, 0x63, 0x6b, 0x52, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x6b,
	0x22, 0x97, 0x01, 0x0a, 0x1a, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x12,
	0x15, 0x0a, 0x06, 0x73, 0x65, 0x71, 0x5f, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x73, 0x65, 0x71, 0x4e, 0x6f, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x37, 0x0a, 0x0d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x73, 0x67, 0x73, 0x2e,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x5c, 0x0a, 0x18, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x65, 0x71, 0x5f, 0x6e, 0x6f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x73, 0x65, 0x71, 0x4e, 0x6f, 0x12, 0x29, 0x0a,
	0x10, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x40, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x65, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1b, 0x0a,
	0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x6d, 0x73, 0x67,
	0x73, 0x2e, 0x4d, 0x73, 0x67, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x12, 0x0a, 0x10, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x45, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x22, 0xe3,
	0x04, 0x0a, 0x0a, 0x48, 0x61, 0x73, 0x68, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x2f, 0x0a,
	0x05, 0x62, 0x61, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x2e,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x48, 0x00, 0x52, 0x05, 0x62, 0x61, 0x74, 0x63, 0x68, 0x12, 0x42,
	0x0a, 0x0c, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x48, 0x61, 0x73,
	0x68, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x2e, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x42, 0x0a, 0x0c, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x5f, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x48, 0x61, 0x73, 0x68, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x2e, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x42, 0x61, 0x74, 0x63, 0x68, 0x48, 0x00, 0x52, 0x0b, 0x76, 0x65, 0x72, 0x69, 0x66,
	0x79, 0x42, 0x61, 0x74, 0x63, 0x68, 0x1a, 0x81, 0x01, 0x0a, 0x05, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x15,
	0x0a, 0x06, 0x73, 0x65, 0x71, 0x5f, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x73, 0x65, 0x71, 0x4e, 0x6f, 0x12, 0x33, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x61, 0x63, 0x6b, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x73,
	0x67, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x6b, 0x52, 0x0b, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x6b, 0x73, 0x1a, 0x9a, 0x01, 0x0a, 0x0b, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x79, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x65, 0x71, 0x5f, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x73, 0x65, 0x71, 0x4e, 0x6f, 0x12, 0x33, 0x0a, 0x0c, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x63, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x6d, 0x73, 0x67, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63,
	0x6b, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x6b, 0x73, 0x12, 0x27,
	0x0a, 0x0f, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x69, 0x67, 0x65, 0x73,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x1a, 0x73, 0x0a, 0x0b, 0x45, 0x70, 0x6f, 0x63, 0x68,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x34, 0x0a, 0x0c, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d,
	0x73, 0x67, 0x73, 0x2e, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x0b, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x06, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x22, 0x54, 0x0a, 0x0f, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x73,
	0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x12,
	0x29, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x4f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x22, 0x16, 0x0a, 0x14, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x22, 0xae, 0x05, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a,
	0x04, 0x73, 0x65, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6e, 0x64, 0x48, 0x00,
	0x52, 0x04, 0x73, 0x65, 0x6e, 0x64, 0x12, 0x2e, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00,
	0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x42, 0x0a, 0x12, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64,
	0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x61, 0x68, 0x65, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x48, 0x00, 0x52, 0x10, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64,
	0x57, 0x72, 0x69, 0x74, 0x65, 0x41, 0x68, 0x65, 0x61, 0x64, 0x12, 0x49, 0x0a, 0x14, 0x74, 0x72,
	0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x61, 0x68, 0x65,
	0x61, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x48,
	0x00, 0x52, 0x12, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x57, 0x72, 0x69, 0x74, 0x65,
	0x41, 0x68, 0x65, 0x61, 0x64, 0x12, 0x2d, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x48, 0x00, 0x52, 0x06, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12,
	0x47, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x53, 0x6c, 0x6f, 0x74, 0x48, 0x00, 0x52, 0x10, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x0f, 0x63, 0x6f, 0x72, 0x72,
	0x65, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x73, 0x67, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x41, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x0e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x0f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x48, 0x00, 0x52, 0x0e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x0d, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0c, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x42, 0x06, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x22, 0x43, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6e,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x04, 0x52, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x12, 0x1b, 0x0a, 0x03, 0x6d,
	0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x6d, 0x73, 0x67, 0x73, 0x2e,
	0x4d, 0x73, 0x67, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x26, 0x0a, 0x0e, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x22, 0x49, 0x0a, 0x0b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x24, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x73, 0x67, 0x73, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x32, 0x0a, 0x0c, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x22, 0x0a, 0x05, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6d, 0x73, 0x67,
	0x73, 0x2e, 0x51, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x62, 0x61, 0x74, 0x63, 0x68, 0x22,
	0xe1, 0x01, 0x0a, 0x10, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x65, 0x71, 0x5f, 0x6e, 0x6f, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x73, 0x65, 0x71, 0x4e, 0x6f, 0x12, 0x40, 0x0a, 0x0e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x73, 0x67, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3e, 0x0a,
	0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x73, 0x67, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52,
	0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x34, 0x0a,
	0x0c, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x73, 0x67, 0x73, 0x2e, 0x45, 0x70, 0x6f, 0x63, 0x68,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x22, 0x47, 0x0a, 0x11, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x65, 0x71, 0x5f, 0x6e, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x72, 0x65, 0x71, 0x4e, 0x6f, 0x22, 0x4d, 0x0a, 0x0d,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x07,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x03, 0x61, 0x63, 0x6b, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x73, 0x67, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x41, 0x63, 0x6b, 0x52, 0x03, 0x61, 0x63, 0x6b, 0x22, 0x64, 0x0a, 0x12, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65,
	0x64, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x65, 0x71, 0x5f, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x05, 0x73, 0x65, 0x71, 0x4e, 0x6f, 0x12, 0x37, 0x0a, 0x0d, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x6d, 0x73, 0x67, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x0c, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x22, 0x52, 0x0a, 0x11, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x29, 0x0a, 0x06, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x52, 0x06, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x22, 0x40, 0x0a, 0x11, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x65,
	0x71, 0x5f, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x73, 0x65, 0x71, 0x4e,
	0x6f, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x29, 0x5a, 0x27, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x66, 0x6c, 0x79, 0x32, 0x70, 0x6c, 0x61, 0x6e, 0x2f, 0x6d,
	0x69, 0x72, 0x62, 0x66, 0x74, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x62, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_state_state_proto_rawDescOnce sync.Once
	file_state_state_proto_rawDescData = file_state_state_proto_rawDesc
)

func file_state_state_proto_rawDescGZIP() []byte {
	file_state_state_proto_rawDescOnce.Do(func() {
		file_state_state_proto_rawDescData = protoimpl.X.CompressGZIP(file_state_state_proto_rawDescData)
	})
	return file_state_state_proto_rawDescData
}

var file_state_state_proto_msgTypes = make([]protoimpl.MessageInfo, 27)
var file_state_state_proto_goTypes = []interface{}{
	(*Event)(nil),                      // 0: state.Event
	(*EventInitialParameters)(nil),     // 1: state.EventInitialParameters
	(*EventLoadPersistedEntry)(nil),    // 2: state.EventLoadPersistedEntry
	(*EventLoadCompleted)(nil),         // 3: state.EventLoadCompleted
	(*EventCheckpointResult)(nil),      // 4: state.EventCheckpointResult
	(*EventRequestPersisted)(nil),      // 5: state.EventRequestPersisted
	(*EventStateTransferComplete)(nil), // 6: state.EventStateTransferComplete
	(*EventStateTransferFailed)(nil),   // 7: state.EventStateTransferFailed
	(*EventStep)(nil),                  // 8: state.EventStep
	(*EventTickElapsed)(nil),           // 9: state.EventTickElapsed
	(*HashOrigin)(nil),                 // 10: state.HashOrigin
	(*EventHashResult)(nil),            // 11: state.EventHashResult
	(*EventActionsReceived)(nil),       // 12: state.EventActionsReceived
	(*Action)(nil),                     // 13: state.Action
	(*ActionSend)(nil),                 // 14: state.ActionSend
	(*ActionTruncate)(nil),             // 15: state.ActionTruncate
	(*ActionWrite)(nil),                // 16: state.ActionWrite
	(*ActionCommit)(nil),               // 17: state.ActionCommit
	(*ActionCheckpoint)(nil),           // 18: state.ActionCheckpoint
	(*ActionRequestSlot)(nil),          // 19: state.ActionRequestSlot
	(*ActionForward)(nil),              // 20: state.ActionForward
	(*ActionStateApplied)(nil),         // 21: state.ActionStateApplied
	(*ActionHashRequest)(nil),          // 22: state.ActionHashRequest
	(*ActionStateTarget)(nil),          // 23: state.ActionStateTarget
	(*HashOrigin_Batch)(nil),           // 24: state.HashOrigin.Batch
	(*HashOrigin_VerifyBatch)(nil),     // 25: state.HashOrigin.VerifyBatch
	(*HashOrigin_EpochChange)(nil),     // 26: state.HashOrigin.EpochChange
	(*msgs.Persistent)(nil),            // 27: msgs.Persistent
	(*msgs.NetworkState)(nil),          // 28: msgs.NetworkState
	(*msgs.RequestAck)(nil),            // 29: msgs.RequestAck
	(*msgs.Msg)(nil),                   // 30: msgs.Msg
	(*msgs.QEntry)(nil),                // 31: msgs.QEntry
	(*msgs.NetworkState_Config)(nil),   // 32: msgs.NetworkState.Config
	(*msgs.NetworkState_Client)(nil),   // 33: msgs.NetworkState.Client
	(*msgs.EpochConfig)(nil),           // 34: msgs.EpochConfig
	(*msgs.EpochChange)(nil),           // 35: msgs.EpochChange
}
var file_state_state_proto_depIdxs = []int32{
	1,  // 0: state.Event.initialize:type_name -> state.EventInitialParameters
	2,  // 1: state.Event.load_persisted_entry:type_name -> state.EventLoadPersistedEntry
	3,  // 2: state.Event.complete_initialization:type_name -> state.EventLoadCompleted
	11, // 3: state.Event.hash_result:type_name -> state.EventHashResult
	4,  // 4: state.Event.checkpoint_result:type_name -> state.EventCheckpointResult
	5,  // 5: state.Event.request_persisted:type_name -> state.EventRequestPersisted
	6,  // 6: state.Event.state_transfer_complete:type_name -> state.EventStateTransferComplete
	7,  // 7: state.Event.state_transfer_failed:type_name -> state.EventStateTransferFailed
	8,  // 8: state.Event.step:type_name -> state.EventStep
	9,  // 9: state.Event.tick_elapsed:type_name -> state.EventTickElapsed
	12, // 10: state.Event.actions_received:type_name -> state.EventActionsReceived
	27, // 11: state.EventLoadPersistedEntry.entry:type_name -> msgs.Persistent
	28, // 12: state.EventCheckpointResult.network_state:type_name -> msgs.NetworkState
	29, // 13: state.EventRequestPersisted.request_ack:type_name -> msgs.RequestAck
	28, // 14: state.EventStateTransferComplete.network_state:type_name -> msgs.NetworkState
	30, // 15: state.EventStep.msg:type_name -> msgs.Msg
	24, // 16: state.HashOrigin.batch:type_name -> state.HashOrigin.Batch
	26, // 17: state.HashOrigin.epoch_change:type_name -> state.HashOrigin.EpochChange
	25, // 18: state.HashOrigin.verify_batch:type_name -> state.HashOrigin.VerifyBatch
	10, // 19: state.EventHashResult.origin:type_name -> state.HashOrigin
	14, // 20: state.Action.send:type_name -> state.ActionSend
	22, // 21: state.Action.hash:type_name -> state.ActionHashRequest
	16, // 22: state.Action.append_write_ahead:type_name -> state.ActionWrite
	15, // 23: state.Action.truncate_write_ahead:type_name -> state.ActionTruncate
	17, // 24: state.Action.commit:type_name -> state.ActionCommit
	18, // 25: state.Action.checkpoint:type_name -> state.ActionCheckpoint
	19, // 26: state.Action.allocated_request:type_name -> state.ActionRequestSlot
	29, // 27: state.Action.correct_request:type_name -> msgs.RequestAck
	20, // 28: state.Action.forward_request:type_name -> state.ActionForward
	23, // 29: state.Action.state_transfer:type_name -> state.ActionStateTarget
	21, // 30: state.Action.state_applied:type_name -> state.ActionStateApplied
	30, // 31: state.ActionSend.msg:type_name -> msgs.Msg
	27, // 32: state.ActionWrite.data:type_name -> msgs.Persistent
	31, // 33: state.ActionCommit.batch:type_name -> msgs.QEntry
	32, // 34: state.ActionCheckpoint.network_config:type_name -> msgs.NetworkState.Config
	33, // 35: state.ActionCheckpoint.client_states:type_name -> msgs.NetworkState.Client
	34, // 36: state.ActionCheckpoint.epoch_config:type_name -> msgs.EpochConfig
	29, // 37: state.ActionForward.ack:type_name -> msgs.RequestAck
	28, // 38: state.ActionStateApplied.network_state:type_name -> msgs.NetworkState
	10, // 39: state.ActionHashRequest.origin:type_name -> state.HashOrigin
	29, // 40: state.HashOrigin.Batch.request_acks:type_name -> msgs.RequestAck
	29, // 41: state.HashOrigin.VerifyBatch.request_acks:type_name -> msgs.RequestAck
	35, // 42: state.HashOrigin.EpochChange.epoch_change:type_name -> msgs.EpochChange
	43, // [43:43] is the sub-list for method output_type
	43, // [43:43] is the sub-list for method input_type
	43, // [43:43] is the sub-list for extension type_name
	43, // [43:43] is the sub-list for extension extendee
	0,  // [0:43] is the sub-list for field type_name
}

func init() { file_state_state_proto_init() }
func file_state_state_proto_init() {
	if File_state_state_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_state_state_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_state_state_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventInitialParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_state_state_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventLoadPersistedEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_state_state_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventLoadCompleted); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_state_state_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventCheckpointResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_state_state_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventRequestPersisted); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_state_state_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventStateTransferComplete); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_state_state_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventStateTransferFailed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_state_state_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventStep); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_state_state_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventTickElapsed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_state_state_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HashOrigin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_state_state_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventHashResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_state_state_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventActionsReceived); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_state_state_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Action); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_state_state_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionSend); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_state_state_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionTruncate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_state_state_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionWrite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_state_state_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionCommit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_state_state_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionCheckpoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_state_state_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionRequestSlot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_state_state_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionForward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_state_state_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionStateApplied); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_state_state_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionHashRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_state_state_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionStateTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_state_state_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HashOrigin_Batch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_state_state_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HashOrigin_VerifyBatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_state_state_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HashOrigin_EpochChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_state_state_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Event_Initialize)(nil),
		(*Event_LoadPersistedEntry)(nil),
		(*Event_CompleteInitialization)(nil),
		(*Event_HashResult)(nil),
		(*Event_CheckpointResult)(nil),
		(*Event_RequestPersisted)(nil),
		(*Event_StateTransferComplete)(nil),
		(*Event_StateTransferFailed)(nil),
		(*Event_Step)(nil),
		(*Event_TickElapsed)(nil),
		(*Event_ActionsReceived)(nil),
	}
	file_state_state_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*HashOrigin_Batch_)(nil),
		(*HashOrigin_EpochChange_)(nil),
		(*HashOrigin_VerifyBatch_)(nil),
	}
	file_state_state_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*Action_Send)(nil),
		(*Action_Hash)(nil),
		(*Action_AppendWriteAhead)(nil),
		(*Action_TruncateWriteAhead)(nil),
		(*Action_Commit)(nil),
		(*Action_Checkpoint)(nil),
		(*Action_AllocatedRequest)(nil),
		(*Action_CorrectRequest)(nil),
		(*Action_ForwardRequest)(nil),
		(*Action_StateTransfer)(nil),
		(*Action_StateApplied)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_state_state_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   27,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_state_state_proto_goTypes,
		DependencyIndexes: file_state_state_proto_depIdxs,
		MessageInfos:      file_state_state_proto_msgTypes,
	}.Build()
	File_state_state_proto = out.File
	file_state_state_proto_rawDesc = nil
	file_state_state_proto_goTypes = nil
	file_state_state_proto_depIdxs = nil
}
